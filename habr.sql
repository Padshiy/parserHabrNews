CREATE TABLE `news` (
  `id` int(10) UNSIGNED NOT NULL,
  `title` varchar(250) DEFAULT NULL,
  `value` text,
  `link` varchar(100) DEFAULT NULL,
  `short` varchar(250) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `news`
--

INSERT INTO `news` (`id`, `title`, `value`, `link`, `short`) VALUES
(1, 'Во всем привычном есть место для истории', 'В прошлом месяце я исследовал два исторических вопроса. Изначально я опубликовал результаты в виде тредов в твиттере, а теперь дублирую их в виде статьи.Почему vim использует hjklВопрос: Почему  vim использует hjkl, а не стрелки для навигации?Типичное объяснение: Для того, чтобы пальцы не покидали домашний ряд.Историческое объяснение: Билл Джой разработал vi на видеотерминале ADM-3A, на котором отсутствовали отдельные клавиши со стрелками. Если вы посмотрите на клавиатуру ADM, стрелки там изображены на клавишах hjkl. Джой использовал ту же логику для vi, а позже и для Vim.Клавиатура ADMЕщё более историческое объяснение: Вообще-то, странно, что на ADM hjkl использовались для стрелок. Почему именно эти буквы?Для этого есть отличная причина. Посмотрите на таблицу символов ASCII версии 1967 года:На каждый символ выделено 7 бит. Первые 32 — \"управляющие символы\", важные для коммуникации, но не являющиеся символами по-настоящему. Компьютерным клавиатурам, созданным по подобию пишущих машинок с QWERTY-раскладкой, требовался способ использовать эти символы, соблюдая при этом то же расположение клавиш. Проблема была решена добавлением дополнительной \"управляющей\" клавиши, которая переключала ввод с физических символов на управляющие. Зажатие этой клавиши обнуляло шестой и седьмой старшие биты выбранного дополнительного символа. Например, если вы хотели отправить \"backspace\", следовало зажать ctrl+H (или ^H). Это преобразовало бы 100 1000 в 000 1000. Аналогично, чтобы добавить разделитель строк, нужно было нажать ^J.Если полистать мануал к ADM, можно увидеть, что \"backspace\" в ADM использовался в значении \"сдвинуть курсор налево\" без удаления текущего символа. Так как ^H и ^J уже использовались как \"влево\" и \"вниз\", имело смысл превратить ^K и ^L в \"вверх\" и \"вправо\". Так что пользователи ADM уже использовали hjkl для навигации, а Билл Джой просто последовал этому примеру при разработке vi.Почему месяцы в JavaScript начинаются с нуляВопрос: В JavaScript\'овом date API месяцы считаются 0-11, а не 1-12. Почему?Типичное объяснение: Так проще индексировать массивы. Нам ведь нужны названия месяцев, не номера. Так можно создать массив, содержащий имена и использовать date.GetMonth() для получения информации.Историческое объяснение: Это способ поддерживать совместимость с Java, которому, в свою очередь, нужно быть совместимым с C.Ещё более историческое объяснение: Тогда почему в C сделано так? И почему всё, связанное с датами в C, нумеруется с нуля, кроме дней?Впервые структура полей tm_date была официально установлена в стандарте ANSI C89, который остается практически абсолютно неизменным и по сей день. Стандарт языка вышел через семнадцать лет после C и формализовал многое из того, что уже было стандартным для различных Unix-систем. Если заглянуть в историю Unix, обнаружится, что в самом раннем примере <ctime.c> в C не используется отдельная структура данных, информация о дате хранится в массиве.#define SEC   0\n#define MIN   1\n#define HOUR  2\n#define MDAY  3\n#define MON   4\n#define YEAR  5\n#define WDAY  6\n#define YDAY  7\n#define ISDAY 8\nctime хранит время как секунды-минуты-часы (SMH), хотя отображает их как HMS. Такая странность начинает иметь смысл, когда принимаешься разбираться в том, как код использовался. Unix 5 использовал эти данные только для того, чтобы показывать время пользователям:int *t;\n{\n    register char *cp, *ncp;\n    register int *tp;\n\ncp = cbuf;\nfor (ncp = &quot;Day Mon 00 00:00:00 1900\\\\n&quot;; *cp++ = *ncp++;);\nncp = &amp;&quot;SunMonTueWedThuFriSat&quot;[3*t[6]];\ncp = cbuf;\n*cp++ = *ncp++;\n*cp++ = *ncp++;\n*cp++ = *ncp++;\ncp++;\ntp = &amp;t[4];\nncp = &amp;&quot;JanFebMarAprMayJunJulAugSepOctNovDec&quot;[(*tp)*3]; // (a)\n*cp++ = *ncp++;\n*cp++ = *ncp++;\n*cp++ = *ncp++;\ncp = numb(cp, *--tp); // (b)\ncp = numb(cp, *--tp+100); // (c)\ncp = numb(cp, *--tp+100);\ncp = numb(cp, *--tp+100);\ncp =+ 2;\ncp = numb(cp, t[YEAR]);\nreturn(cbuf);\n\n}\nЯ прокомментировал пару интересных строк. Сначала мы используем сохранённый месяц в (a). Вместо того, чтобы хранить имена всех месяцев в массиве, разработчики записали трёхбуквенные аббревиатуры каждого месяца в одну строку, а затем использовали номер месяца для вычисления указателя, чтобы получить три необходимых байта. Затем, в (b) они получают день и время в HMS в (c), декрементируя адрес указателя трижды. Хранение времени в SMH позволяет избавиться от дополнительного явного перехода (так как они итерируют по значениям в обратном порядке). Разработчики воспользовались тем фактом, что, поскольку поля хранятся как элементы массива, они расположены в одном месте в памяти.Всё это говорит нам о том, что они оптимизировали каждую мелочь. Что целесообразно, ведь первые версии Unix были созданы на компьютерах PDP-7. В приличном компьютере 1970-х могло быть всего пара килобайт памяти. И если попробовать хранить имена месяцев в памяти, не исключено, что они заняли бы почти 10% всей RAM!Разработчикам было нужно следить за тем, чтобы использовать как можно меньше памяти и CPU, и адресная арифметика помогла сэкономить на обоих — а арифметика проще, если нумеровать месяцы с нуля, а не с единицы. При этом, день месяца никогда не использовался ни для чего, кроме как для отображения пользователю (b), поэтому он хранился непосредственно в представимой форме.Эта история так же объясняет небольшую несостыковку в структуре: MDAY (день месяца) начинается с единицы, а YDAY (день года) — с нуля. Однако это логично для дилеммы \"вычисление против отображения\": день года никогда не показывался пользователю. Он использовался только для расчёта момента перехода на летнее время (в воскресенье по местному времени).ЗаключениеОба объяснения неполные. Можно закопаться еще глубже, чем \"всего\" на два уровня истории вниз. Относительно вопроса про hjkl, резонно было бы поинтересоваться, почему ASCII-таблица устроена именно таким образом. С историей про tm_date, можно разобрать на кусочки более ранние версии Unix, посмотреть, что происходило там, или поговорить с создателями напрямую. И даже это — не единственные варианты. Всегда есть куда погрузиться дальше, преодолевая слои истории один за другим.Но двух достаточно для этой статьи. На двух уровнях можно увидеть общую закономерность в изучении истории, заметить разницу между ответами и толкованиями. На вопрос, почему что-то выглядит так, как выглядит, большинство людей дадут рационализированный пост-фактум ответ. Скорее всего, мысли о том, почему так \"лучше\", придут им, основанные на настоящем. Однако, если заглянуть немного в прошлое, обнаружится, что чаще всего всё просто \"так исторически сложилось\". А если глянуть еще дальше, можно узнать, что за \"силы\" привели к такому состоянию дел.Такая разница между первым и вторым слоями истории приводит в очень досадную ловушку. Люди смотрят на верхушку и предполагают, что на этом всё — отчего история начинает казаться неуместной. И даже когда мы понимаем, что историческая подоплёка больше, чем думалось изначально, раскопки каждого нового слоя требуют значительно больше работы, чем предыдущего. Узнать то, что Билл Джой использовал ADM-3A, можно из первой строчки гугла. Чтобы узнать более глубинные причины, мне потребовалось два часа.Но оно того стоило. Если углубиться на второй уровень, можно открыть для себя гораздо больше о контексте и о причинах, почему дела обстоят так, как есть. И конечно, нельзя отрицать то, что в этом процессе есть частичка загадки, а значит, удовольствие от обнаружения объяснения тайне. Утраченные знания снова обретены.', 'https://habr.com/ru/company/timeweb/blog/555886/', 'В прошлом месяце я исследовал два исторических вопроса. Изначально я опубликовал результаты в виде тредов в твиттере, а теперь дублирую их в виде статьи.Почему vim использует hjklВопрос: Почему  vim и'),
(2, 'Строим твёрдотельный лазер без регистрации и смс', '\r\n\r\nЛазер. Как много в этом слове… Ну и так далее. Помню, с каким интересом я открывал один из школьных учебников по физике и рассматривал картинки устройства рубинового лазера. Сделать такое было бы сродни получить мощь гиперболоида инженера Гарина. Как всё было просто на картинке учебника! Но повторить такое школьнику в 90-е это было бы что-то из области фантастики. Прошло много лет, окончена кафедра квантовой электроники ЛЭТИ, но мечта осталась. Пора её реализовать! Итак, вперёд.\r\n\r\nКак многим известно, лазеры бывают газовые, твёрдотельные, полупроводниковые, жидкостные, на свободных электронах, газодинамические и, наверное, ещё какие-нибудь. Лично мне всегда был интересен именно твёрдотельный лазер — огромная импульсная мощность и относительная простота конструкции. \r\nИз каких же компонентов состоит твёрдотельный лазер? Во-первых, нам потребуется активный элемент. \r\nЧаще всего, активные элементы делают из кристаллов синтетического рубина, алюмо-иттриевого граната (YAG) и иттрий-алюминиевого перовскита (YAP), активированных неодимом, а так же неодимового стекла (возможно, вам попадётся и что-нибудь другое, но это вряд ли). \r\n\r\nТакие активные элементы (далее — АЭ) можно приобрести (вот что было недоступно школьнику в 90-е!) на avito, ebay, meshok или на специализированных лазерных форумах типа lasers.org.ru или laserforum.ru. При этом следует учесть, что цены на лазерных форумах гораздо ниже, чем на барахолках и очень часто продавцы там точно знают, что продают. На барахолках же каждый второй продаёт «рубин» по удивительно высоким ценам, при этом их не смущает слегка фиолетовый цвет продаваемого «рубина». Поэтому первым пунктом при покупке АЭ будет его идентификация. \r\n\r\nКак отличить кристаллы от стёкол? Обычно, кристаллические АЭ имеют гладкую поверхность стержня (есть исключения: например, для YAG и YAP иногда поверхность делается с рифлением, чтобы избежать паразитной генерации) и не имеют утолщений с краёв. Стеклянные же АЭ имеют шершавую поверхность и утолщения с краёв. Возможно, из этих правил есть исключения, но мне они неизвестны.\r\n\r\nРубины часто имеют неокрашенные участки с концов стержня — это сделано потому, что рубин поглощает собственное излучение, а так как концы АЭ будут находиться в кристаллодержателе и свет лампы накачки туда не доберётся, что для сплошного окрашенного АЭ приведёт к невозможности или сильном снижении эффективности работы лазера. У гранатов, перовскита и стекла с неодимом таких проблем нет — собственное излучение они поглощают очень слабо.\r\n\r\nНекоторые АЭ могут иметь небольшие скосы, которые мешают паразитной генерации (либо при больших скосах под углом Брюстера дают линейно-поляризованное излучение). Возможно и нанесённое просветление на торцах. Со скосами брать АЭ не советую — сьюстировать их будет сложнее, да и вообще, насколько мне известно, эти стержни, обычно, от усилителей, а не от генераторов. Встречаются также рубины с уже нанесёнными зеркалами на торцах. Такие рубины применяли в лазерных дальномерах и покупка такого АЭ избавит вас от поиска зеркал под рубин и юстировки резонатора, хотя долговечность такого лазера не будет особенно большой. \r\n\r\nСледует предостеречь от покупки большого АЭ, особенно, рубинового. Прокачать такие АЭ очень трудно. Легче всего качаются гранат и перовскит, тяжелее стёкла, а рубин вообще жрёт накачку как не в себя.\r\n\r\n\r\nYAG\r\n\r\n\r\nРубин\r\n\r\n\r\nСтекло с неодимом\r\n\r\nВыбирая АЭ следует учесть, что стёкла с неодимом бывают силикатные и фосфатные (есть и ещё куча типов стёкол, но я сильно сомневаюсь, что вы их встретите в продаже). Фосфатные обладают большей эффективностью, но имеют меньшую механическую и термическую прочность, Вообще, по тепловым и механическим параметрам любое стекло сильно проигрывает и рубину и гранату и перовскиту. Марки стёкол доступные самодельщикам это ЛГС (лазерное генерирующее стекло), КГСС (думаю, это расшифровывается как квантово-генерирующее какое-то там (силикатное? фосфатных не было?) стекло) или ГЛС ( генерирующее люминесцирующее стекло). ЛГС и КГСС — это старые названия стёкол. Самое распространённое стекло ГЛС-1 (ему соответствует также какой-то номер старого КГСС и, возможно, ЛГС). Всё с ним хорошо, но оно в отличие от остальных типов стёкол боится ультрафиолета. Ультрафиолета, впрочем боятся и гранат с перовскитом и даже рубин. От него они теряют эффективность работы, так как от улттрафиолета восстанавливаются всегда присутсвующие в них примеси.\r\nТакже гранат немного менее эффективен, чем перовскит. Отличить гранат от перовскита можно используя тот факт, что перовскит обладает поляризацией, а значит, посмотрев через торец АЭ на картинку на экране ЖК монитора и вращая кристалл, вы увидите изменение светопропускания от максимума до минимума и обратно. Гранат таким свойством не обладает. \r\nПеровскит и рубин дают поляризованное излучение лазера (обычно, они вырезаны так, чтобы получалось поляризованное излучение). Гранат даёт неполяризованное излучение. \r\n\r\nКстати, если взять зелёный лазер и посветить в рубин, он засветится ярким красным цветом. Гранат и стекло с неодимом излучают и ИК и их свечение вы не увидите, хотя луч зелёного лазера они поглотят как и положено.\r\n\r\nТак, с идентификацией закончили. Теперь надо выяснить, на что же нам надеяться выбирая АЭ. Для рубина можно получить генерацию яркой красной линии 694 нм в импульсном режиме (в непрерывном вы дома точно не получите), стёкла с неодимом работают строго в импульсном режиме (иначе разрушаются) в ИК на 1062 нм для силикатного стекла и 1054 нм для фосфатного, гранат и перовскит можно запустить как в импульсном, так и в непрерывном режиме (зависит от количества запихнутого в них неодима) в том же ИК на 1064 нм. У неодима есть и другие линии генерации, но основные именно указанные выше. Также усиление у граната и перовскита на порядок выше, чем у стёкол. Порог генерации тоже существенно ниже. У рубина же из-за трёхуровневой схемы накачки порог генерации весьма высок. Вообще, порог генерации сильно связан с концентрацией в АЭ допанта (неодим для стёкол и гранатов/перовскита и хром для рубина ), габаритами АЭ и параметрами зеркал резонатора. В конце статьи я приведу ссылку на мою программу расчёта пороговой энергии накачки. В луч лазера пойдёт энергия сверх пороговой с КПД около 1%.\r\n\r\nДля АЭ потребуется резонатор. Проще всего собрать резонатор Фабри-Перо. Состоит он просто из двух параллельных зеркал. Зеркала, правда, нужны не простые, а диэлектрические. Одно с почти 100% отражением, а второе с необходимым пропусканием (обычно, 50% для стекла и 90% для граната и перовскита в импульсном режиме и 15% в непрерывном). Для неодимовых АЭ этими зеркалами на 1064 нм завален весь алиэкспресс и стоят они довольно дёшево, только не перепутайте пропускание с отражением. Вообще-то, для импульсного режима зеркала должны обладать высокой лучевой прочностью, но китайцы параметры своих зеркал вам вряд ли скажут. \r\nДля рубина же вас ожидает сюрприз. Несмотря на тот, что рубиновый лазер исторически был первым, он оказался неудобным из-за трёхуровневой схемы накачки, а потому таких лазеров было сделано мало. Зеркала на 694 нм на алиэкспрессе не купишь, а на барахолках цена вас не обрадует (десяток тысяч рублей и выше за зеркало). Тем не менее, мне такие зеркала от ГОР-100 (генератор оптический на рубине, 100 Дж), пусть и немного исцарапанные, подарили на одном из лазерных форумов, за что я безмерно благодарен этому щедрому человеку (его ник Silverray). Есть, конечно, вариант использовать зеркала с кареток DVD-привода (зелёненькое на просвет как выходное и синенькое на просвет как глухое), но мне не удалось с ними запустить рубиновый лазер, хотя есть сведения об успешности такого решения. Исторически в рубиновом лазере зеркала были нанесены на торцы просто серебряным покрытием, но дома такое сделать смогут разве что любители химии. К тому же серебро поглощает излучение и выгорает, а его коэффициент отражения не идёт ни в какое сравнение с коэффициентом отражения диэлектрического зеркала. \r\n\r\n\r\nГлухое зеркало от ГОР-100.\r\n\r\n\r\nРезонатор лазера.\r\n\r\nЗеркала резонатора требуется настраивать. Для этого нужны подвижки. Я сделал самодельные подвижки, но рекомендую купить готовые на алиэкспресс (там они для CO2-лазера) или на барахолках. Дело всё в том, что там винтовые пары шлифованые, а не нарезанные. Шлифованная пара не болтается и не люфтит. В стройтоварах вы такого точно не найдёте.\r\n\r\n\r\nПромышленная подвижка зеркала\r\n\r\n\r\nСамодельная подвижка зеркала\r\n\r\nЛампа, отражатель, АЭ собираются в один блок, называемый квантроном. Квантрон можно купить готовый (например, К-107, К-301), а можно сделать самому. Отражатель квантрона (да и сам квантрон) можно сделать, например, из керамических корпусов предохранителей (автор этой идеи, как я понимаю, Nerv с lasers.org.ru). Промышленные отражатели тоже бывают керамические или зеркальные. Зеркальные со временем обгорают. Керамические не обгорают. Клеить керамические корпуса самодельного квантрона между собой надо очень аккуратно, так как осевшие внутри пары клея мгновенно обуглятся при вспышке лампы накачки. Может возникнуть искушение взять лампу и АЭ и просто обмотать их фольгой. Да, это называется плотная упаковка и она отлично работает! Вот только фольга нужна толстая — пищевая довольно быстро придёт в негодность и разлетится хлопьями в лучшем случае, а в худшем начнёт плавиться и въестся в колбу лампы тёмными пятнами.\r\n\r\n\r\nПредохранители с керамическим корпусом для отражателя квантрона.\r\n\r\n\r\nСамодельный квантрон без отражателя на основании\r\n\r\n\r\nКвантрон К-107 с отражателем, активным элементом и лампой\r\n\r\nНакачку твёрдотельного лазера, обычно, осуществляют лампой или другим лазером. Наш вариант — лампа. Лампы бывают для непрерывных лазеров и для импульсных. Отечественные лампы для непрерывной накачки имеют маркировку ДНП (дуговая, для накачки, с прямым телом свечения) и являются криптоновыми лампами. Я с ними не работал. Импульсную накачку же осуществляют ксеноновыми лампами серий ИСП (не работал с ними), ИФП (импульсная, фотоосветительная, с прямым телом свечения) и ИНП (импульсная, для накачки, с прямым телом свечения). Для ламп ИНП указывается диаметр и длина разрядного промежутка. Например, ИНП3-7/80 имеет длину 80 мм и 7 мм диаметр разрядного канала. Серия ИФП маркируется по максимальной энергии, например, ИФП-800 это лампа для разряда 800 Дж.\r\n Крайне не рекомендую смотреть на эти лампы в момент вспышки! Для сравнения, энергия разряда советской фотовспышки «Чайка» всего 25 Дж. А тут 800 Дж! А есть ещё ИФП-5000… и ИФП-20000. :) Требуемое время вспышки лампы, обычно, в районе 1-10 миллисекунд. Можно догадаться, что лампы в процессе работы сильно греются и их, как и АЭ приходится охлаждать дистилированной водой. Впрочем, если давать импульсы редко, лампа и сама успеет охладиться. Между прочим, в спектре этих ламп очень много ультрафиолета (на заметку для дезинфекторов — за миллисекунду любой вирус и бактерия просто испарится, правда, часто вместе с поверхностью — тёмная бумага, например, обугливается), что вредно для кристаллов и стекла ГЛС-1, как я уже выше сказал. Этот ультрафиолет отсекают либо добавками в раствор охлаждения лампы, либо нанесённым на баллон лампы покрытием (как у лампы ИНП3-7/80 A), которое, увы, без охлаждения имеет свойство выгорать. Я в своём лазере водяное охлаждение пока не использую. Воздушное же применять не стоит, так как оно требует хорошей очистки воздуха, иначе попавшая пылинка на АЭ, зеркала, лампе приведёт к прогару в месте её нахождения. А вам такое точно не надо.\r\n\r\n\r\nЛампа ИНП3-70/80А.\r\n\r\nЧтобы запустить лампу, требуется батарея боевых конденсаторов на заданное напряжение (зависит от лампы и обычно составляет около киловольта и выше) и поджигающий импульс в десяток-два киловольт, обеспечивающий пробой канала в лампе. Схем зажигания две: внешний поджиг и последовательный. Для внешнего поджига высоковольный импульс подаётся на навитый на баллон лампы никелевый электрод. Для последовательного в цепь питания лампы подключается поджигающий трансформатор. Мой выбор — последовательный поджиг — нет оголённых электродов снаружи баллона лампы. На этом этапе стоит задуматься о проводах, выдерживающих такие напряжения и токи. Я выбрал ПВМП-4 сечением 0.75. Маловато сечение, конечно, но пока хватает и к тому же можно и связать в параллель.\r\n\r\n\r\nВнешний поджиг.\r\n\r\n\r\nПоследовательный поджиг.\r\n\r\nТрансформатор поджига иногда можно купить (например, марки ТИС-3), но я сначала сделал его из сердечника ТВС, а потом собрал ещё один новый трансформатор из четырёх склеенных ферритовых колец наружным диаметром 4.5 см, внутренним 3 см и высотой 1.5 см каждое, после склеивания обмотанными фторопластовой лентой. На этот каркас я намотал провод ПВ-1 сечением 1 мм^2 в количестве 17 витков. Всё это щедро залито эпоксидкой, ибо там десяток киловольт таки проскакивают. Первичная обмотка сделала из одного витка провода ПВ-1 сечением 4 мм^2 (на фото ниже старый трансформатор на базе сердечника от ТВС, в котором первичка просто болт — так работает хуже, чем если намотать полноценный виток), на который коммутируется разрядный конденсатор 2 мкФx1500 В, создавая во вторичке трансформатора поджигающий импульс. Этот импульс можно использовать для мгновенной разрядки основной батареи конденсаторов в лампу, а можно им сперва зажечь в лампе дежурную дугу в которую потом уже вгонять энергию для накачки с нужной частотой. Устройство для такой дуги называется симмер, если дуга горит постоянно, или певдосиммер, если дуга не горит постоянно, а вспыхивает за некоторое время до разряда. Дежурная дуга очень сильно увеличивает ресурс лампы, но я пока её не делал. Так что мой вариант — разрядка батареи конденсаторов сразу в поджигающий импульс. \r\nВообще, мой блок питания лампы имеет вот такую вот схему:\r\n\r\n\r\nСхема блока питания лазера. ВНИМАНИЕ! Конденсатор C1 не ставить!!!\r\n\r\nЭто обычный повышающий push-pull преобразователь с 25 В до 1600 В. В процессе настройки у меня часто горели тиристоры, и я экспериментальным путём выяснил, что если управлять тиристорами серией импульсов, то они почти не выгорают. «Почти», потому что один раз за четыре месяца такой случай всё же случился и я добавил после этого случая дополнительную защитную цепочку. Дроссель в цепи питания лампы нужен для обеспечения «мягкого» разряда лампы. Расчёт оптимальных параметров зажигания ламп есть в книжке Вакуленко «Источники питания лазеров», а часть этого расчёта есть в моей программе расчёта пороговой энергии накачки лазера.\r\nКакую энергию потребуется запасать в конденсаторах? Ну, как минимум не ниже пороговой. У меня конденсаторы запасают не меньше 600-800 Дж. Пиковое — 2200 Дж. Конденсаторы, кстати, очень желательны малоиндуктивные, а это значит, электролиты для накачки плохи. Впрочем, время жизни уровня в рубине 3 мс, поэтому для рубинового лазера электролитические конденсаторы подходят хорошо, только их нужно шунтировать обычным конденсатором, чтобы обратная волна при зажигании лампы не прошла через электролиты и не вызвала их деградацию с последующим взрывом внутри банки. :) Да, такое у меня было. Поэтому я теперь запускаю лазер в наушниках — и так после коронавируса свист в ушах/в голове до конца не прошёл, а после «бабаха» свист только усиливается и потом требует опять лечения. Для электролитических конденсатором также можно отказаться от дросселя — они и так весьма тормознутые.\r\nДля неодимого лазера желательны конденсаторы типа К75-40б и подобные, так как время жизни уровня в неодиме меньше миллисекунды (точное значение в разных средах по-разному).\r\n\r\n\r\nФото моего блока питания. Трансформатор ещё старый на ТВС (просто я не дома, вот и не могу переснять фотки).\r\n\r\nНе забудьте также про защитные очки — вторые глаза в комплект, как известно, не входят, а мастера тлейлаксу у нас не водятся. Я купил РОСОМЗ ЗН22-СЗС22 LAZER 22203. Для 694 нм оптическая плотность у них 3 (ослабляют в тысячу раз), а для 1064 оптическая плотность 6 (ослабляют в миллион раз). Разумеется, смотреть прямо в луч что без что в очках категорически недопустимо!\r\n\r\n\r\nОчки для защиты от лазерного излучения\r\n\r\nОснованием для лазера должна служить массивная плита. Чем она массивнее и прочнее, тем лучше, потому что точность юстировки требуется около 10 угловых секунд для рубина и несколько грубее для граната, перовскита или стекла. Гранат и перовскит вообще прощают косо поставленные зеркала — усиление у них очень велико и проходов луча в резонаторе нужно не так много. Даже выходное зеркало для граната и перовскита в импульсном режиме можно заменить на простую стеклянную пластинку (отражение около 10% с двух граней). Так что самодельщикам рекомендую гранат и перовскит прежде всего! Не разочаруют.\r\n\r\nСобрав всё на основании, лазер требуется отъюстировать, то есть выставить зеркала параллельно друг другу и торцам АЭ (это важно — косые отражение от торцов снизят энергию луча). Как это сделать? Возьмите обычную лазерную указку (это будет пилотный лазер) и зеркальный блин от винчестера. Приклейте к блину сантиметровый пластиковый треугольник (квадрат распилите на две части по диагонали и ту часть, которую пилили и приклейте). Просверлите в центре уголка (и через зеркальный блин) отверстие около 0.5-1 мм. Наклейте на уголок указку, чтобы луч проходил через отверстие. Указку с наклеенным блином зажмите в тиски или поставьте на штатив от фотоаппарата (тут придётся мудрить с креплением, но этот вариант сильно удобнее — можно углы и высоту легко менять). В данной схеме блин будет играть роль зеркала, отражая вам обратно отражённый от зеркал луч, ибо в конце коридора искать луч глазами очень трудно, а тут он будет отражаться почти рядом с вами). А дальше включите получившийся пилотный лазер и отодвиньте от юстируемого лазера на пару-тройку метров. Совместите по высоте луч, чтобы он проходил через резонатор, и ловите юстировками зеркал и поворотами АЭ (вместе со станиной лазера) на потолке отражения торца АЭ и зеркал, загоняя их отражения на блине винчестера в точку выхода луча пилотного лазера. Совместили? Ну вот и вся юстировка. Относительно грубо, конечно, но часто работает с первого раза. Подстроить можно будет потом по отпечаткам уже запуская хоть чуть-чуть работающий лазер. Проблемы могут возникнуть, когда лазер работает вблизи порога — там фиг отпечаток на мишени увидишь — мала энергия. Но тут уже ничего не поделаешь, надо стараться попадать. Автоколлиматором, конечно, было бы гораздо удобнее и точнее юстировать, но где ж его дома возьмёшь… \r\n\r\nА теперь результаты.\r\n\r\n\r\nЛуч рубинового лазера на мишени\r\n\r\nРубиновый.\r\n\r\n\r\nСтекло ГЛС-9П 12x260 с неодимом\r\n\r\n\r\nГранат с неодимом по металлу\r\n\r\n\r\nГранат с неодимом по пластику\r\n\r\n\r\nПрограмма расчёта минимальной энергии накачки лазера и параметров вспышки лампы.\r\n\r\n\r\n\r\nВсё вроде бы работает в расчёте, но вот неизвестна достоверность результатов расчёта ( это я и предлагаю вам оценить ).\r\nТакже есть особенности:\r\n1) Мне неизвестен квантовый выход люминесценции для граната. Я взял его как 0.59.\r\n2) Длительность импульса вспышки считается как 2*sqrt(L*C) и не переносится автоматически в поле «Время вспышки, с». Это вам надо делать ручками, если вы согласны с полученным в расчёте временем.\r\n3) Я не проверяю тип введённых данных и диапазоны их изменения. Возможно, потом это сделаю, если программа всё-таки даёт достоверные результаты.\r\n4) Для стекла с неодимом мне неизвестна населённость нижнего лазерного уровня. Я масштабирую населённость в гранате с известной концентрацией неодима к заданной в стёклах или гранате.\r\n\r\nP.S. Часть картинок в статье взята из интернета и принадлежит их авторам.\r\nP.P.S. Выражаю благодарность всему форуму Lasers.org.ru, помогавшему мне собирать все эти лазеры.', 'https://habr.com/ru/post/555822/', '\r\n\r\nЛазер. Как много в этом слове… Ну и так далее. Помню, с каким интересом я открывал один из школьных учебников по физике и рассматривал картинки устройства рубинового лазера. Сделать такое было бы '),
(3, 'Недельный геймдев: #16 — 2 марта, 2021', 'Из новостей на этой неделе:\r\n\r\nMicrosoft урезает комиссию для разработчиков с 30 процентов до 12 в Windows Store\r\nСогласно опросу GDC, только 3% разработчиков считают оправданной 30-процентную комиссию цифровых магазинов\r\nВышел Quixel Mixer 2021\r\nНовый пример Hybrid Shadows, новое в RGP, а также другие обновления FidelityFX\r\nВышел Ultra App Kit для написания GUI\r\nGoogle запустил Open Saves — систему облачного хранения данных с открытым исходным кодом для разработчиков игр\r\nВышел UV Kit 2.0 для Maya\r\nВышел Raylib 3.7\r\nAWS запускает Amazon Nimble Studio для VFX и анимации\r\nВ UModeler добавили функцию Hotspot texturing\r\nEpic Games приобрели площадку ArtStation и снижают комиссию\r\nКисть Relax для нод в Blender\r\n\r\nИз интересностей:\r\n\r\nРендеринг больших трёхмерных тайловых карт за один draw call с 3000 фпс\r\nТрёхминутное видео с лучшими новыми работами за 2021, созданными в Cinema 4D, Redshift и инструментах Red Giant\r\nМаятник Ньютона: моделирование и анимация\r\n\r\n\r\n\r\nОбновления/релизы/новости\r\nMicrosoft урезает комиссию для разработчиков с 30 процентов до 12\r\n\r\nИзменения вступят в силу с 1 августа. Пока только на ПК.\r\nСогласно опросу GDC, только 3% разработчиков считают оправданной 30-процентную комиссию цифровых магазинов\r\n\r\nТакже опрос показал, что ПК является самой популярной платформой у создателей игр в общем, а среди консолей PS5.\r\nВышел Quixel Mixer 2021\r\n\r\nТеперь с множественным набором текстур и поддержкой UDIM.\r\nНовый пример Hybrid Shadows, новое в RGP, а также другие обновления FidelityFX\r\n\r\n​RDNA реализация ambient occlusion теперь имеет высоко оптимизированное собственное разрешение SSAO, также улучшили качество SSAO с пониженным разрешением.\r\nВышел Ultra App Kit для написания GUI\r\n\r\nСоздатель игрового движка Leadwerks выпустил SDK на C++ для создания приложений с графическим интерфейсом. SDK похоже на Dear ImGui, но основное отличие в том, что UAK больше похож на традиционные фреймворки вроде WPF, Qt и WinForms.\r\nМожно использовать с существующими движками, если он позволяет контекст задать. Можно использовать в OpenGL.\r\nGoogle запустил Open Saves — систему облачного хранения данных с открытым исходным кодом для разработчиков игр\r\n\r\nНа данный момент в режиме альфа-тестирования. Не рекомендуется использовать в проде.\r\nСистема была разработана совместно с 2K и позволяет хранить сохранения игроков, патчи и DLC. С помощью встроеной системы кэширования происходит оптимизация данных на основе их объёма и частоты обращения к ним.\r\nВышел UV Kit 2.0 для Maya\r\n\r\nВ этой версии инструмент переписан с нуля. Обновлён пользовательский интерфейс — он стал более компактным.\r\nВышел Raylib 3.7\r\n\r\nПрошло 4 месяца с прошлого релиза, тем временем, разработчик фреймворка засветился в Google Open Source Peer Bonus Award. Самое крупное изменение в 3.7 — переработка модуля rlgl для большей абстракции.\r\nAWS запускает Amazon Nimble Studio для VFX и анимации\r\n\r\nНовую универсальную облачную платформу, которая позволит компаниям, занимающимся VFX и анимацией, создавать полноценные студии в облаке.\r\nПлатформа предоставляет пользователям доступ к виртуальным рабочим станциям на базе Nvidia, общему облачному хранилищу и интегрированному онлайн-управлению рендерингом на основе AWS Thinkbox Deadline.\r\nВ UModeler добавили функцию Hotspot texturing\r\n\r\nНовая фича упрощает и ускоряет работу с UV-развёрткой в UModeler. Когда вы определяете слои UV с помощью редактора, UV каждого полигона могут быть автоматически размещены в соответствии с предопределёнными слоями.\r\nEpic Games приобрели площадку ArtStation и снижают комиссию\r\n\r\nСтандартный сбор в ArtStation Marketplace снизится с 30% до 12%. Для пользователей Pro-версии сайта комиссию с дохода уменьшили с 20% до 8%, а с собственных продаж — с 20% до 5%.\r\nКисть Relax для нод в Blender\r\n\r\nПомогает упорядочить узлы. Горячие клавиши: Shift + R.\r\nИнтересные статьи/видео\r\nРендеринг больших трёхмерных тайловых карт за один draw call с 3000 фпс\r\n\r\nДефолтная система по работе с тайлами в Unity автора не устроила. Вторая попытка с фрагментным шейдером тоже оставляла желать лучшего.\r\nФинальное решение — кастомный настраиваемый рендерер, который хранит слои как воксели, содержащие индексы в срезах массива текстур.\r\nТрёхминутное видео с лучшими новыми работами за 2021, созданными в Cinema 4D, Redshift и инструментах Red Giant\r\n\r\nМаятник Ньютона: моделирование и анимация\r\n\r\nВсё это с помощью SDF в shader toy.', 'https://habr.com/ru/post/555888/', 'Из новостей на этой неделе:\r\n\r\nMicrosoft урезает комиссию для разработчиков с 30 процентов до 12 в Windows Store\r\nСогласно опросу GDC, только 3% разработчиков считают оправданной 30-процентную комисси'),
(4, 'Тонкое искусство быть девелопер адвокатом', '\r\nОт переводчика: профессия девелопер адвоката появилась не так давно и почти у каждого крупного продукта или технологии есть свой адвокат, технологические компании понимают важность этого канала общения с миром. Есть такая должность и в Haulmont. Когда мы формулировали требования к вакансии, нам самим пришлось отвечать на вопрос \"А что же должен делать девелопер адвокат?\" И эта статья простым языком и очень исчерпывающе на этот вопрос отвечает.\r\nНесколько лет назад я написал статью “Кто такой вообще этот девелопер адвокат?”, в которой постарался помочь людям в технической индустрии понять, что входит в эту роль. И до сих пор я получаю тонны вопросов про это в Твиттере.\r\nВ этой статье я собираюсь пролить свет на роль Developer Advocate и в этот раз приведу конкретные примеры задач и обязанностей, которые я выполняю в своей ежедневной работе в качестве Senior Developer Advocate в Microsoft, а также в качестве человека, который занимается этим с 2015 года. \r\nПредупреждение:\r\nВсе мнения, выражаемые в этой статье, являются моими собственными и не представляют моего нанимателя или коллег.\r\nДавайте сначала немного проясним разницу между дев. адвокатством и технологическим евангелизмом. Посмотрим на определение обоих терминов.\r\nДевелопер адвокат и технологический евангелист\r\nСуществует некоторая путаница в понимании терминов “Дев. адвокатство” и “Технологический евангелизм”. Давайте взглянем на их определения. \r\nСогласно википедии, понятие “Technology Evangelist” было изобретено Apple в рамках инициативы по убеждению разработчиков создавать приложения для Macintosh. Глагол “убедить” здесь очень важен, потому что евангелист должен был пытаться склонить разработчика к использованию определенной технологии, не обязательно выслушивая его доводы и не беря во внимание его потребности или мнение. \r\nИ это прямо противоположно тому, что делает адвокат!\r\n“Advocacy” — это старая концепция, которая берет свое начало от латинского слова “advocare”, что значит “добавить голос”. Термин “advocate” происходит от старофранцузского “avocat”, что означает “законник”. Таким образом, Advocate дословно означает, “кто-то, кто ведет дело в суде”, “кто спорит о том, что что-то должно быть изменено, улучшено”.\r\nПрименительно к технологической индустрии эти два термина могут выглядеть довольно похожими, но есть маленькое различие: роль технологического евангелиста состоит в том, чтобы доносить информацию в одну сторону (только выдавать её), а роль адвоката рассматривается в разрезе двунаправленного потока информации — как выдача информации, так и её приём. Адвокат обычно заинтересован в том, чтобы выслушать разработчиков, понять их желания и предоставить наиболее подходящую помощь. Также адвокат собирает обратную связь и доносит её людям внутри компании. \r\nИменно поэтому эти два звания должны применяться осмысленно.\r\nТем не менее, я хочу сделать шаг назад и обратить ваше внимание на то, что за теоретическим определением на практике всегда есть некоторые исключения из понимания составляющих этой работы. У меня есть друзья на должности “Технологический евангелист”, но то, что они делают, больше похоже, на “Дев. адвокат” (и наоборот). Что действительно имеет значение — это не должность, а то, что делается, чтобы помогать разработчикам достичь успеха. \r\nДевелопер адвокат и маркетолог\r\nСпроси любого адвоката о его роли — всегда получишь разный ответ, и это немного путает. Причем это обычный случай. А вы когда-нибудь задумывались, почему так? Основная причина в том, что множество компаний нанимают дев. адвоката для выполнения разных задач, от продаж и коммуникаций до (в основном) маркетинга. Почему маркетинг? Потому что компании обычно тратят от 5 до 12 процентов своего дохода на маркетинг, и, когда нужно достучаться до большего количества разработчиков, они обычно нанимают кого-то в качестве “адвоката” (или чего-то похожего), кто отчитывается отделу маркетинга и должен выполнять KPI по маркетингу и продажам. Ещё важнее в этой ситуации то, что эта роль существует вне команды разработки продукта, что может стать проблемой (поговорим об этом далее).\r\nНе поймите меня неправильно, нет ничего плохого в компаниях, которые используют маркетинг и продажи для привлечения большего количества разработчиков, но делать это, используя зонтичный бренд “дев. адвокат”, — это оказание медвежьей услуги буквально всем. В целом, это обычно оказывается неудачным шагом, потому что не все разработчики хорошо умеют продавать (и заниматься продвижением продукта) и обычно делают это плохо. Разработчики изобретательны и креативны, но немногие обладают базовыми навыками продвижения бизнеса. Почему, вы думаете, большинство стартапов основаны как минимум двумя людьми? Если бы я был хорош в продажах и маркетинге, я бы гораздо лучше продвигал свои собственные open-source проекты, а вы наверняка даже не слышали про xlayers.dev. Так ведь? \r\n\r\nДля того, чтобы достучаться до разработчиков, команда маркетинга должна объединять усилия с дев. адвокатами и помогать им лучше сформулировать то, что нужно донести. Почему? Потому что дев. адвокаты прежде всего сами являются разработчиками и говорят с ними на том же языке.\r\nВо многих других случаях компании просто игнорируют настоящий смысл понятия “адвокатство”, и всё заканчивается придумыванием своего собственного определения, основанного на требованиях бизнеса. Ровно поэтому дев. адвокаты не понимают, какова их роль или какова она должна быть. Я надеюсь, что эта статья хоть как-то поможет!\r\nДевелопер адвокат и деврел (Developer Relations)\r\nГоворя простым языком, деврел — это зонтичный термин для команд, включающих дев. адвокатов, менеджеров сообществ разработчиков и любых других команд, в чьи обязанности входит налаживание и укрепление связей с разработчиками. Некоторые большие компании делают так же, как мы в Microsoft, включая туда команды, ответственные за документирование, мероприятия и социальные сети.\r\nТаким образом, дев. адвокатство — крохотное подмножество деврел. \r\n\r\nКакая у меня роль в Microsoft?\r\nВ качестве дев.адвокатов мы можем не совпадать во мнении о том, что мы делаем или что должны делать, но все согласны с одним определением:\r\n“Наша роль — работать мостиком между внутренней командой разработки и сообществом разработчиков. Мы также защищаем мнение сообщества внутри команды”.\r\nПеред тем, как я начну описывать свою работу в Microsoft, немного контекста: меня наняли из-за моего знания JavaScript и моих крепких отношений с сообществом JavaScript разработчиков. В настоящее время я работаю в составе команды адвокатов JavaScript. Наша команда принадлежит к деврел организации, которая является частью департамента разработки Azure в Microsoft. \r\nМоя ежедневная работа — говорить от имени сообщества JavaScript разработчиков внутри Microsoft, быть их голосом в ходе митингов команды продукта или внутренних исследований. Во “внешнем мире” я поддерживаю и собираю обратную связь от JavaScript разработчиков, чтобы мы могли улучшить наши продукты и услуги. В общем, я помогаю JavaScript разработчикам успешно использовать Microsoft Clouds, сервисы и инструменты разработки с открытым кодом.\r\nВы, возможно, видите, что Microsoft постоянно поднимает планку качества для своих продуктов, и, чтобы этого достичь, компания инвестирует в разработчиков и открытый код. Поэтому миссия нашей деврел команды — помогать разработчикам достигать большего. Наша большая дев. адвокатская команда (или облачная дев. адвокатская команда, как мы ее внутри называем, поскольку помогаем команде девопс) состоит из нескольких подкоманд, которые сфокусированы на различных сообществах разработчиков, таких как Rust, Java, Python и т.д., а также на таких аудиториях, как студенты, научные работники и стартапы. \r\nМиссия облачной команды адвокатов — завоевать сердца и умы разработчиков через честность, дух сообщества и вовлечение через технологии.\r\n\r\nКак выглядит мой типичный день дев адвоката?\r\nЗадачи, о которых я расскажу ниже, это дела, которые “я” обычно делаю. Мои коллеги могут делать, а могут и не делать “то же самое”.\r\nСоздание контента\r\nЯ участвую в написании документации и остального контента в различных форматах, используемых инженерами по всему миру. Это может быть просто обновление существующей документации, а может быть создание полной документации, как, например, документация по Azure Static Web Apps, над которой работала моя команда совместно с командой документации Microsoft.\r\nДругой контент включает создание и размещение уроков для разработчиков, задачек на кодирование, а также вещей “на один зубок”, которые я регулярно публикую в твиттере.\r\nВот пара примеров из недавнего:\r\n\r\nи вот:\r\n\r\nПубличные выступления\r\nВозможно, это одна из самых заметных активностей, которые приносят дурную славу дев. адвокатам. Это тоже часть моей работы: чтение технических докладов или участие в пленарных докладах на международных конференциях и выставках. В основе своей это означает быть там, где разработчики. Это также включает в себя проведение прямых эфиров, участие в подкастах и создание прочего медиаконтента.\r\nСоздание инструментария “в открытую”\r\nКроме работы, которую я делаю для своей компании, я также активный участник сообщества разработчиков софта с открытым кодом, и большая часть проектов, которые я делаю для своего нанимателя — это тоже софт с открытым кодом. Это значит, что моя работа ещё и помогать разработчикам успешно осваивать инструменты, которые помогают им использовать и интегрировать Azure в свои продукты и приложения. Последние инструменты, которые я делал — https://www.hexa.run, библиотеки Nest.JS для Azure CosmosDB, и Azure Storage. Можете посмотреть на все мои проекты с открытым кодом на wassim.dev.\r\nДонесение обратной связи о продукте\r\nПостоянно улучшать продукты и сервисы, которые используют разработчики, — одна из центральных задач нашей команды. Я провожу почти все время общаясь с разработчиками и инженерами через социальные сети, на онлайн и офлайн конференциях. Я получаю тонны запросов от разработчиков, которые задают вопросы, сообщают о проблемах или просят о новой функциональности. В первую очередь, я стараюсь им помочь, если я хорошо знаком с продуктом. Для серьезных проблем или популярных запросов о новой функциональности я завожу задачи на нашей внутренней доске и плотно сотрудничаю с продуктовой командой, чтобы улучшить опыт использования на основе обратной связи от разработчиков. \r\nЭто как раз тот случай, когда в качестве дев. адвоката я могу выступать от имени JavaScript разработчиков, быть их голосом внутри команды. Недавний пример — продукт Azure Static Web Apps, где я провел последние полтора года, участвуя в разработке продукта и помогая команде инженеров создать часть сервиса, обеспечивая важную обратную связь, пробуя новую функциональность и разрабатывая CLI инструмент для разработчиков. \r\nСоздание и выпуск продукта\r\nЕщё один аспект работы дев. адвоката, который, возможно, игнорируется множеством людей — это то, что некоторые из нас также участвуют в создании продуктов и их выкатке в прод, как внешних, так и внутренних. Последние полгода у меня была возможность поучаствовать в создании, лидировании и доставке пользователям официального приложения Azure Static Web Apps CLI, которое позволяет разработчикам запускать и отлаживать свои приложения локально. \r\nЯ думаю, это то, что должен делать каждый дев. адвокат, потому что это крайне необходимо для понимания того, как продукт или сервис спроектирован, реализован, знать его сильные и слабые стороны. Это то знание, которым необходимо обладать, если мы хотим помогать разработчикам. \r\nБыть “нулевым пользователем”\r\nПриличная часть моего времени уходит на улучшение продуктов и сервисов Azure, на работу с командами разработчиков Azure во всей компании для того, чтобы попробовать новую функциональность и дать обратную связь от JavaScript разработчиков об их ожиданиях. Продукты, с которыми я успел поработать за последние два года: Azure Functions, Azure Storage, Azure Cosmos DB, Azure IoT, Azure Static Web Apps, GitHub Codespaces и npm. Быть “нулевым клиентом” — отличный способ кардинально повлиять на продукт до его релиза. Один из примеров здесь — Azure Static Web Apps: моя команда и я тесно сотрудничали с командой разработки, чтобы помочь обеспечить лучший опыт использования сервисов для всех web разработчиков, которые будут им пользоваться. \r\nПостоянное обучение\r\nПоскольку JavaScript широко используется в множестве различных областей, стек технологий, на котором я обычно сосредоточен, это: Node.js, TypeScript, Serverless, архитектура IoT, базы данных и хостинг. Я также буду честным: я был восхищен языком Rust и планирую изучать его в ближайшем будущем! К счастью, мои коллеги из команды дев. адвокатов языка Rust сделали учебник 5 hours free guide about Rust for beginners. Похоже, для меня это отличное начало!\r\nСоздание и улучшение официальной документации\r\nКак дев. адвокат я также трачу какое-то время на создание подробных технических наставлений для многих сервисов Microsoft Cloud. Одно из последних, над которой моя команда и я работали четыре месяца, — the Node.js Learn Path. Что хорошо в нашей официальной документации — это то, что она открыта и любой может помочь с улучшением. Мы также регулярно принимаем в этом участие и делаем пулл реквесты на улучшение и обновление документации на http://docs.microsoft.com.\r\nПомогать другим расти\r\nЕщё один аспект моей работы — ну, это не совсем официальный аспект моих должностных обязанностей — но он очень важен для меня: помогать людям вокруг меня расти и быть успешными. Как представитель меньшинства, который добился успеха в индустрии, я очень забочусь об инклюзивности и разнообразии. Таким образом, помогать другим расти профессионально и персонально — это часть меня самого.\r\nЯ участвую во внутренних менторских программах через официальную программу менторства в Microsoft. Во внешнем мире я работаю как наставник для людей из сообщества, которые являются новичками в программировании и хотят поменять карьеру, а также для тех, кто хочет принимать участие в проектах с открытым кодом. Я, очевидно, не могу раскрывать все подробности, но, в целом, помогаю и даю советы по программированию, технологиям и карьерному росту моим ученикам. \r\nБизнес, цели и ключевые результаты\r\nДавайте внесем ясность: цель каждой компании — делать бизнес. Компания не просто платит тебе за то, что ты работаешь над проектами с открытым кодом, путешествуешь и выступаешь. Компания инвестирует в тебя и ожидает ROI (возврата инвестиций). Но мы все знаем, что ROI сообществ и построения отношений не так просто определить и измерить.\r\nМы постоянно пересматриваем и обновляем наши OKR (цели и ключевые результаты), стратегию и планирование, чтобы соответствовать более широкой стратегии компании, в то же время давая команде свободу общаться с разработчиками естественным образом, вести полезные беседы, помогать им решать их проблемы и быть их адвокатом.\r\nЗаключительные идеи\r\nОсновные задачи инженеров — дизайн, реализация и выкатка продукта, и те, кто хочет поделиться своим опытом с сообществом, могут это сделать. Дев. адвокаты не отличаются от инженеров, кроме того, что они не работают над продуктом полный рабочий день, а помогают командам разработки достучаться до разработчиков и понять их нужды, чтобы создать наилучший опыт использования для каждого. \r\nДев. адвокаты — инженеры, которым нравится учиться открыто.\r\nЭто моя история. Если вам нравится то, что вы прочитали, и вы согласны с этим, обратите внимание, что наша команда ищет новые кадры. Загляните на нашу страницу https://aka.ms/awesomejobs.\r\nБонус: айсберг дев. адвокатства.\r\n\r\nПишите мне в твиттер @manekinekko, если у вас ещё есть вопросы про дев. адвокатство. Вы также можете наблюдать за моими работами на wassim.dev.', 'https://habr.com/ru/company/haulmont/blog/555902/', '\r\nОт переводчика: профессия девелопер адвоката появилась не так давно и почти у каждого крупного продукта или технологии есть свой адвокат, технологические компании понимают важность этого канала обще');
INSERT INTO `news` (`id`, `title`, `value`, `link`, `short`) VALUES
(5, 'Внимание, интереснейший опрос на Хабре — будьте бдительны', 'Сегодня читая пост \"Вы не увидите эту рекламу в Instagram, потому что Facebook обиделся\" я заметил справа блок \"НЛО прилетело и хочет познакомиться с вами\". Ну, хочет и хочет - почему бы и нет? Создатели Хабра хотят узнать свою аудиторию - нужно помочь любимому ресурсу.Нажал на пипу, открылся опрос \"Знакомимся с нашими читателями\". А дальше пошло странное...Прежде всего бросился в глаза домен \"typeform.com\". Зачем Хабру проводить опрос на левом сервисе?Затем смутило \"from=promo\" в URL, т.е. переход был из рекламного блока. Хм...Сам опрос оформлен в стиле Хабра, но  без логотипов и прямых ссылок/отсылок. Может быть, Хабр делал опрос  в спешке? Ресурсу нужна наша помощь - в сторону сомнения!И понеслось... Прежде всего идут очень личные  вопросы - кто, откуда, сколько получаете. Без возможности пропуска ответов. Ну, допустим... От Хабра мне же скрывать нечего.Но после первого блока вопросов пошли вопросы вида \"Как часто  вы заходите не Хабр?\", \"Что вы делаете на ресурсе?\". Странные вопросы от Хабра. Но, может быть мне это только кажется- нельзя сдаваться, нужно продолжать отвечать! Пропускать ответы, напомню, нельзя (в комментариях пишут, что пропускать можно, но не очевидным образом)- Вы зарегистрированы на Хабре?- Как давно??!!!Что?! Я перешёл по ссылке с Хабра, прохожу опрос от Хабра, и Хабр не знает зарегистрирован ли я на нём и как давно?!Этом месте я перестал отвечать на вопросы и бросился писать этот пост.Надеюсь, настоящее НЛО прилетит, обратит внимание и примет меры. А всем остальным я бы советовал данный опрос не проходить.P.S. В комментариях предполагают, что это настоящий опрос от Хабра, просто очень анонимный и  непродуман. Добавлю такой вариант в вопрос. Но у меня столько красных флагов в голове загорелось при попытке его пройтиP.S. В комментариях сказали, что опрос настоящий. Паника отменяется.', 'https://habr.com/ru/post/555908/', 'Сегодня читая пост \"Вы не увидите эту рекламу в Instagram, потому что Facebook обиделся\" я заметил справа блок \"НЛО прилетело и хочет познакомиться с вами\". Ну, хочет и хочет - почему бы и нет? Создат'),
(6, 'Сколько стоит создать и запустить дропшиппинг-магазин на Shopify в 2021 году', 'Сфера e-commerce становится все более популярной вне всяких сомнений, и логичным решением в текущий период экономической «турбулентности» становится открытие своего интернет-магазина. Наиболее простым вариантом старта является запуск дропшиппинг-бизнеса. Работая по данной модели можно продавать физические товары по всему миру, не имея их в наличии. Вам не нужно иметь собственные склады, проводить инвентаризацию и самостоятельно отправлять товары.Несмотря на привлекательность бизнес-модели, для старта необходимо иметь бюджет, который позволит качественно собрать и запустить интернет-магазин. Конкуренция в сфере растет, и вслед за ней увеличивается размер необходимого бюджета на полноценный запуск дропшиппинг-магазина. В данной статье мы рассмотрим все необходимые статьи расходов и ответим на вопрос: «Сколько же стоит запустить свой магазин на Shopify в 2021 году?».Что формирует итоговую стоимость магазина?Итак, для того, чтобы создать дропшиппинг-магазин на Shopify, вам необходимо учитывать несколько статей расходов:Доменное имяХостингТемаСтоимость разработки сайтаПриложения и дополнительные сервисыМаркетингРекламный бюджетПрием платежейЗапас на кассовый разрывДополнительные / непредвиденные расходыДалее мы более подробно расскажем о каждом из пунктов, формирующих итоговую стоимость запуска дропшиппинг-магазина. Ориентировочные расчеты будут произведены на примере запуска магазина на Shopify при интеграции с Aliexpress (без предварительного закупа товаров, как при работе с дропшиппинг-агентом или фулфилмент-центром).1. Доменное имяСтоимость: $10 / годУ вас не может быть сайта без доменного имени. Это постоянный адрес вашего магазина, поэтому выбирать его нужно с умом. Стоимость доменного имени также будет варьироваться и зависеть от двух основных факторов:Компания-регистратор доменных имен (рекомендуем namecheap.com);Доменная зона (.com наиболее предпочтителен, но и чаще всего обойдется дороже).Стоимость домена варьируется в районе $8-15 у таких регистраторов, как GoDaddy или Namecheap. 2. ХостингСтоимость: $29 / месяцДомен и хостинг – это базовые услуги, без которых невозможно создать ни один сайт. Если домен – это онлайн-адрес сайта, то хостинг – это пространство, на котором он «живет». Чтобы создать сайт, нам необходимо воспользоваться хостингом.У вас есть два варианта: самостоятельное создание сайта и покупка хостинга отдельно или использование Saas-сервисов (конструкторов), которые предоставляют вам широкий функционал, включая хостинг. Существует ряд хостингов для интернет-магазинов. С наиболее популярными платформами для зарубежной электронной коммерции вы можете ознакомиться в одной из наших статей.В данной статье мы сфокусируемся на наиболее популярной на сегодняшний день платформе Shopify – одном из лидеров рынка конструкторов интернет-магазинов. Стоимость хостинга наряду с другими функциями уже включена в тарифные планы Shopify. У вас есть три варианта на выбор:Для начала рекомендуем остановиться на тарифе Basic за $29. Вы можете воспользоваться бесплатным 14-дневным пробным периодом, чтобы протестировать все возможности Shopify.3. ТемаСтоимость: $0-180У платформы Shopify есть магазин с большим количеством как бесплатных, так и платных тем. В случае, если вы только начинаете свой путь в электронной коммерции, для создания тестового магазина рекомендуем использовать бесплатные темы:BrooklynDebutДля того, чтобы разобраться в принципе работы платформы, бесплатной темы может быть более чем достаточно. Однако, для полноценного запуска магазина мы рекомендуем установить одну из платных тем. Они обладают более широким функционалом, а также добавляют индивидуальности интернет-магазинам.В магазине тем Shopify шаблоны в среднем стоят $180, что является значительным расходом в случае, если вы создаете свой первый магазин. В качестве альтернативной площадки можно рассмотреть каталог платных тем themeforest.net, где можно приобрести качественные адаптивные темы за $50-100.4. Разработка сайтаСтоимость: $0-300 и до бесконечности:)Один из самых важных моментов – непосредственно сборка магазина. Воспользовавшись бесплатным периодом платформы Shopify и установив тему, вы можете собрать сайт самостоятельно без навыков программирования. Посмотрев несколько обучающих туториалов в свободном доступе (желательно на английском языке) можно самостоятельно собрать вполне рабочий интернет-магазин в относительно короткие сроки.Вопрос лишь в том, насколько сайт будет качественным и продающим. Многое зависит от вашего опыта и знаний. Если вы заинтересованы в том, чтобы ваш магазин выглядел уникально и к тому же в результате давал показывал высокую конверсию, то помощь специалистов – лучший вариант. Однако, следует учитывать, что стоимость качественной разработки сайта может сильно варьироваться.Если вы хотите сэкономить время, минимизировать риски возникновения серьезных ошибок в работе сайта, то команда Ecom Today поможет вам в создании и настройке магазина. 5. Приложения и дополнительные сервисыСтоимость: $50-80 / месяцПосле сборки магазина и наполнения его товарами рекомендуется подключить к магазину необходимые приложения. Часть приложений помогает в упрощении процесса оформления заказов, другие автоматизируют email-маркетинг, способствуют повышению конверсии или помогут в увеличении среднего чека – функционал приложений практически бесконечен и ограничен лишь фантазией разработчика и покупательной способностью владельца магазина.Магазин приложений Shopify – это сокровищница функциональности, которой вы можете и должны пользоваться для оптимизации интернет-магазина. В магазине приложений Shopify представлено более 1500 приложений на любой вкус и цель.Приложения Shopify бывают как платными, так и бесплатными. Многие приложения предоставляют пробный периоды от 7 до 30 дней. Не следует загружать магазин большим количеством приложений, так как это скажется на скорости загрузки сайта и ваших расходах. Мы рекомендуем установить следующие приложения (либо их аналоги):Abandonment Protector – отправка серии писем тем, кто бросил корзину;Loox Reviews – импорт отзывов с Aliexpress к товарам в вашем интернет-магазине;Vitals – увеличении конверсии и среднего чека.6. МаркетингСтоимость: $0-70Вы действительно можете создать отличный оптимизированный магазин с качественным дизайном и грамотно оформленными товарами, но он не принесет вам прибыли, если на него не будет направляться трафик.Если вы планируете всерьез заняться продажей товаров зарубеж, вам нужно будет выделять большое количество времени на продвижение вашего магазина с помощью разных каналов, одним из основных среди которых является Facebook.Как и во всем, мы рекомендуем изначально разобраться в настройке рекламы самостоятельно, чтобы иметь базовые знания и минимальный опыт работы с рекламными площадками. Не делегируйте эту задачу сторонним специалистам сразу (только если партнерам), так как вы не сможете грамотно оценивать результаты и контролировать эффективность работы человека, кому вы доверите данную задачу.Также к возможным маркетинговым расходам необходимо отнести разработку креативов – один из важнейших этапов запуска магазина. О создании видеокреативов для рекламы товаров мы рассказали в статье. Перед запуском своего первого товара мы крайне рекомендуем изучить актуальные доступные материалы по созданию креативов. Чем качественнее будет ваш видеокреатив, тем больше трафика в рамках установленного бюджета вы сможете привлечь на ваш сайт.В среднем, стоимость создания видеокреативов для одного товара варьируется от $40 до $70.7. Рекламный бюджетСтоимость: $1000 и большеСамая основная составляющая вашего общего бюджета на запуск магазина – рекламный бюджет. Скорость развития вашего проекта и вас как специалиста сильно зависит от суммы денег, которую вы можете потратить на продвижение вашего интернет-магазина и тест отдельных товаров.Очевидно, что конкуренция на международном рынке гораздо выше, чем в СНГ, соответственно, запуск рекламы и сбор первых данных об аудитории обходится дороже. Как будет расходоваться ваш бюджет, зависит от многих факторов. Среди основных:ваши навыки настройки рекламы;гео вашей целевой аудитории;качество креативов;конверсия сайта;средний чек товаров на сайте.В связи с пандемией коронавируса и не только, наблюдается стремительный рост сферы e-commerce по всему миру, из чего следует увеличение количества рекламодателей на всех площадках, в частности, в Facebook. Теперь, чтобы показать рекламное объявление своей целевой аудитории и получить переход на сайт, приходится платить больше, поэтому $100 не достаточно для того, чтобы определить потенциал выбранного товара. Мы рекомендуем иметь минимум $200-250 на тест одного товара, чтобы иметь возможность получить достаточное количество данных и сделать вывод касательно товара – продолжать работать с ним дальше или переходить к другому товару.Никогда неизвестно, какой по порядку товар из запущенных «выстрелит» и будет приносить стабильные продажи, поэтому необходимо иметь бюджет на запуск нескольких товаров. Наша рекомендация – минимум $1000.8. Платежная системаСтоимость: $0-149Если вы проживаете в СНГ, подключить платежную систему к интернет-магазину для работы с зарубежным рынком самостоятельно крайне трудно. Один из наиболее доступных вариантов, насчет которого начинают задумывать новички – это Paypal. Несмотря на свою популярность, данная платежная система не гарантирует стабильный прием платежей.Наиболее оптимальным вариантом является платежная система Stripe, которая, к сожалению не работает с бизнесами из СНГ. Среди возможных вариантов подключения Stripe для приема платежей: аренда / покупка аккаунта или регистрация компании за рубежом. Более подробно рассказано в статье «Способы подключения Stipe в СНГ в 2021».В дальнейшем при работе со Stripe необходимо учитывать комиссию – 2,9% + $0,30 за транзакцию.9. Запас на кассовый разрывСтоимость: $100-200В данной статье мы рассматриваем интеграцию магазина с платформой Aliexpress. В таком случае у вас нет необходимости заранее пополнять баланс для оплаты товаров, как при сотрудничестве с дропшиппинг-агентом, или закупать товар заранее и отправлять его в фулфилмент-центр. Вы можете начать продавать без предварительного закупа товаров.Вдохновившись первыми продажами в своем магазине, многие забывают о том, что новичкам чаще всего недоступен мгновенный вывод средств. Момент ожидания может длиться до 7 дней, поэтому, для оплаты новых заказов вам обязательно нужно иметь резервные $100-200, в зависимости от стоимости закупа товаров.10. Дополнительные / непредвиденные расходыСтоимость: $100 – $500В любом бизнесе невозможно точно рассчитать потенциальные затраты. Вернее, можно, но фактор непредвиденности, сезонные колебания, блокировки аккаунтов и задержки в поставке – все это может сформировать дополнительные статьи расходов.Необходимо учитывать следующие аспекты:Возвраты покупателям – стоит допускать, даже если у вас абсолютно \"белый\" бизнес;Комиссия Shopify – 2% с каждой транзакции на тарифе за $29;Комиссия Stripe – 2,9% + $0,30 с каждой транзакции;Дополнительные возможные комиссии при выводе средств;Социальные аккаунты и бизнес-менеджеры Facebook;Оплата дополнительных возможных услуг;Платные обучающие материалы;Прокси / VPN;Налоги.Общий бюджет для запуска дропшиппинг-магазинаТеперь, когда мы детально разобрались с каждым пунктом, мы можем рассчитывать примерную итоговую стоимость магазина. Необходимо учитывать, что данные, приведенные выше в статье, являются усредненными и могут отличаться от фактических данных.Итак, если рассматривать самый экономичный вариант, при котором вы самостоятельно разрабатываете дропшиппинг-магазин и настраиваете рекламу, но дополнительно обращаетесь за услугой подключения платежной системы, то общая стоимость запуска проекта составит от $1500.В статье мы рассмотрели основные статьи расходов, которые формируют общий бюджет для запуска дропшиппинг-магазина на Shopify. Если вы только планируете запустить свой первый магазин, вы можете опираться на информацию, описанную выше, для наиболее корректного планирования будущих расходов.И еще кое-что...Мы новенькие на Хабр, но у нас уже достаточно внушительный опыт в сфере eCommerce, которым мы с удовольствием готовы делиться. Наша команда действительно старается публиковать самые интересные и актуальные материалы , которые помогут вам быть в курсе текущих трендов и новостей в сфере eCommerce. Мы всегда рады новым читателям и с радостью продолжим делиться своими наблюдениями и наработками. Если статья была полезна, то мы будем благодарны, если вы поддержите наш канал комментарием.', 'https://habr.com/ru/post/555904/', 'Сфера e-commerce становится все более популярной вне всяких сомнений, и логичным решением в текущий период экономической «турбулентности» становится открытие своего интернет-магазина. Наиболее простым'),
(7, 'Как поживает PHP сообщество в Дагестане?', '\r\nЕсть много инфоповодов из-за которых люди знают о Дагестане, но мало что из них связано с программированием. Именно это наше и другие дагестанские IT сообщества хотят изменить. \r\n\r\nВообще Дагестан довольно айтишный регион, но центром всего движа является столица Махачкала. Тут много кружков по робототехнике для детей, курсов для начинающих программистов. Проблема лишь в том, что это не сильно рекламируется. \r\n\r\nПервые шаги в сторону митапов начало сообщество DevSeagulls еще в 2016 году, также у них самый большой IT чат в Дагестане. Авторами данного сообщества являются Исмаил Магомедов, Саид Амиров, Эльвира Темирханова.\r\n\r\nА уже в сентябре 2020 года мы основали PHP сообщество и назвали его крайне просто “PHP Dagestan”. Мы набрали небольшое количество людей, начали обсуждать пути развития, правила чата и тп. Первую двадцатку участников мы собрали довольно быстро для регионального сообщества и уже начали думать что нам пора запускать симпозиумы (Так мы называем митапы. Почему? Потому что можем!).\r\n\r\nПервый наш симпозиум мы провели 9 января, это было закрытое мероприятие чисто для нашего чата, помещение нам бесплатно предоставила it компания CRON.\r\n\r\nВыступили 3 спикера с темами: \r\n\r\n\r\nБезопасность в PHP (@r0hack Ramazan aka r0hack — DeteAct)\r\nРабота с очередями (@LordGidra Магомедов Газимагомед — 05.ru)\r\nПотоки в PHP (@IsrapilAkhmedov Исрапил Ахмедов)\r\n\r\n\r\n\r\nВторой симпозиум прошел 27 февраля масштабнее, мы арендовали помещение, заказали пиццы, была профессиональная съемка, пришло около 30-40 человек. Во всем этом нам помогла компания 05 ru\r\n\r\nВыступили 4 спикера с темами:\r\n\r\n\r\nЧто такое CI/CD и как его настроить? (@fedor2dostoevsky Канаматов Мухтар — Pay-GO)\r\nПольза использования докера в разработке и в бою? (@LordGidra Магомедов Газимагомед — 05.ru)\r\nКак собрать команду которая не распадется? (Кристина Алиева — Щит-квешн)\r\nБезопасная разработка (@r0hack Ramazan aka r0hack — DeteAct)\r\n\r\n\r\nИтак, настало время третьего симпозиума, который состоится 18 мая. В этот раз впервые спикером будет гость из другого города. Мы рассчитываем набрать больше 50-ти человек и сделать все еще лучше, чем было до этого. \r\n\r\nВыступят 3 спикера с темами: \r\n\r\n\r\nPreloading и аннотации в PHP (@develop007 Клычев Дамир — Cron)\r\nПочему php-шнику стоит присмотреться к Camunda для автоматизации сложных бизнес-процессов? (@sboychenko Сергей Бойченко — Skyeng)\r\nШардирование баз данных. Что это такое? (@sagidM Сагид Магомедов — Яндекс)\r\n\r\nТакже у нас будет трансляция на youtube:\r\n\r\nЕсли вам интересна тема IT в Дагестане, то можете подключиться к любой из этих ссылок:\r\n\r\nPHP Dagestan — телеграм-чат для PHP-разработчиков\r\n\r\nА может на PHP ? — телеграм-канал для PHP-разработчиков\r\n\r\nIT event Dagestan — телеграм-канал об IT событиях\r\n\r\nDevSeagulls — общий телеграм-чат об IT\r\n\r\nDev Seagulls Fem — instagram страница женского дагестанского IT-сообщества\r\n\r\nГорский дизайн — телеграм-чат для дизайнеров\r\n\r\nРабота для дизайнера — телеграмм-канал\r\n\r\nDigital Вакансии — телеграмм-канал с вакансиями для smm\r\n\r\nРабота в ИТ — телеграмм-канал c it вакансиями\r\n\r\nЛегкие мемi на английском — мой телеграмм-канал с легкими мемами на английском для изучения языка', 'https://habr.com/ru/post/555900/', '\r\nЕсть много инфоповодов из-за которых люди знают о Дагестане, но мало что из них связано с программированием. Именно это наше и другие дагестанские IT сообщества хотят изменить. \r\n\r\nВообще Дагестан д'),
(8, 'Простой, но умный ход, применяемый в zsh и fish для решения проблемы пропущенного символа перевода строки', 'Сегодня я хочу рассказать о том, как командные оболочки zsh и fish обнаруживают пропущенные символы перевода строки и выделяют соответствующие места в выводе программ, делая это в условиях, когда модель программирования Unix не даёт им возможности исследовать то, что выводят программы.\r\n\r\nБольшинство командных оболочек, включая bash, ksh, dash и ash, выводят приглашение командной строки в той позиции, в которой остался курсор после завершения работы предыдущей команды.\r\n\r\n\r\n\r\nТо, что приглашение (почти) всегда выводится в известном всем месте, в самой левой колонке следующей строки, объясняется тем фактом, что Unix-программы единодушно сотрудничают в деле размещения курсора именно в этой позиции после завершения их работы.\r\n\r\nДелается это благодаря тому, что в конце того, что выводит программа, всегда ставится символ перевода строки \\n (известный так же как «новая строка»):\r\n\r\nvidar@vidarholen-vm2 ~ $ whoami\nvidar\nvidar@vidarholen-vm2 ~ $ whoami | hexdump -c\n0000000   v   i   d   a   r  \\n\n\r\nЕсли программа не сможет выполнить это соглашение, то приглашение командной строки после этого окажется не там, где обычно:\r\n\r\nvidar@vidarholen-vm2 ~ $ echo -n \"hello world\"\nhello worldvidar@vidarholen-vm2 ~ $\n\r\nНо недавно я заметил, что оболочки zsh и fish в подобных ситуациях выводят особые символы, указывающие на место, в котором должен был стоять знак перевода строки, и, всё равно, показывают приглашение там, где пользователи ожидают его увидеть:\r\n\r\nvidarholen-vm2% echo -n \"hello zsh\"\nhello zsh% \nvidarholen-vm2%\n\nvidar@vidarholen-vm2 ~> echo -n \"hello fish\"\nhello fish⏎\nvidar@vidarholen-vm2 ~>\n\r\nЕсли сейчас вы несколько разочарованы тем, что материал, который вы читаете, посвящён такой вот мелочи, то это, скорее всего, значит, что вы никогда не пытались написать собственную командную оболочку. И то, о чём тут идёт речь, представляет собой одну из таких проблем, которые кажутся тем сложнее, чем больше о них узнаёшь.\r\n\r\n\r\nВзято отсюда\r\n\r\nЕсли вам в голову пришло какое-то простое решение этой задачи — возможно, нечто в духе if (!output.ends_with(»\\n»)) printf(»%\\n»); — примите во внимание следующие ограничения:\r\n\r\n\r\nНесмотря на распространённое мнение, оболочка не располагается между программами и терминалом. У оболочки нет возможности перехватывать или исследовать то, что программы выводят в терминал.\r\nМодель программирования, используемая при написании программ для терминала, базируется на механизме, лежащем в основе телетайпов (их ещё называют TTY) — электромеханических печатных машинок из начала прошлого века. Они выводили данные на бумагу, печатая букву за буквой, поэтому в распоряжении того, кто работает с чем-то, устроенным так же, как телетайп, нет ни памяти, ни буфера экрана, из которого можно программно считать ранее записанные в него данные.\r\n\r\nУчитывая это — вот несколько несовершенных способов решения вышеописанной задачи:\r\n\r\n\r\nОболочка может использовать конвейеры для перехвата всего вывода программ, а после перехвата может перенаправлять вывод в терминал. Хотя в простых случаях, например, в случае с командой whoami, это и сработает, некоторые программы проверяют, представлен ли файл stdout терминалом, и соответствующим образом меняют поведение, а другие идут в обход и общаются с TTY напрямую (например — приглашение ввода пароля, выводимое ssh). Некоторые программы используют особые вызовы ioctl TTY и не будут работать в том случае, если им придётся выводить результаты не в TTY. Например — это происходит при запросе размеров окна или при подавлении вывода на экран введённых символов при вводе пароля.\r\nОболочка может исследовать процесс с помощью ptrace для того чтобы выяснить, что и куда он записывает. Это означает огромную дополнительную нагрузку на систему и нарушает работу sudo, ping и других команд, полагающихся на suid.\r\nОболочка может создать псевдо-tty (pseudo-tty, pty), выполнять в нём команды и переправлять данные между ним и настоящим терминалом, поступая подобно тому, как работают команды ssh или script. Это — муторный и неуклюжий подход, при применении крайней формы которого потребуется переписать весь эмулятор терминала.\r\nКомандная оболочка может использовать возможности оповещения о позиции курсора, описанные в стандарте управляющих символов ECMA-48. Так, команда printf \'\\e[6n\', выполненная в терминале, поддерживающем эту возможность, приведёт к тому, что терминал будет воспроизводить пользовательский ввод в форме ^[[y;xR, где y и x — это строка и столбец. А командная оболочка может читать эти данные для того чтобы иметь представление о том, где находится курсор. Подобные вещи, хотя и выполнимы, отличаются достаточно сложной и заковыристой реализацией, если вспомнить, что речь идёт о наделении командной оболочки сравнительно простой возможностью.\r\n\r\nВ командных оболочках zsh и fish используется подход, который гораздо проще и разумнее тех, о которых мы только что говорили:\r\n\r\n\r\nОни всегда выводят индикатор пропущенного символа перевода строки, независимо от того, нужен он или нет.\r\nЗатем они дополняют строку пробелами в количестве $COLUMN-1.\r\nПотом идёт символ возврата каретки для перехода на первый столбец.\r\nИ наконец — выводится приглашение.\r\n\r\nЭто — очень простое решение, так как для его реализации нужно лишь выводить строку фиксированного размера перед каждым приглашением, но оно чрезвычайно эффективно во всех терминалах. (Разработчик fish и читатель Hacker News ComputerGuru объяснили, что в деле переноса строк в разных терминалах есть множество «подводных камней», которые усложняют приведённую здесь схему работы.)\r\n\r\nПочему?\r\n\r\nПредставим, что наш терминал имеет ширину, равную 10 колонкам и высоту в 3 строки. Обычная программа, выводящая короткую строку, выведет в конце и символ перевода строки:\r\n\r\n[vidar     ]\n[|         ]\n[          ]\n\r\nКурсор, показанный символом |, находится в начале следующей строки. А вот что произойдёт на шаге 1 и 2:\r\n\r\n[vidar      ]\n[%         |]\n[           ]\n\r\nМы видим индикатор, и так как мы вывели символы, количество которых точно соответствует $COLUMN, курсор находится после последнего столбца. Теперь, на шаге 3, символ возврата каретки перемещает курсор обратно к началу строки:\r\n\r\n[vidar      ]\n[|%         ]\n[           ]\n\r\nПосле этого приглашение командной строки перекрывает индикатор, выводясь в той же строке:\r\n\r\n[vidar      ]\n[~ $ |      ]\n[           ]\n\r\nИтоговый результат будет таким же, как если бы мы просто вывели приглашение там, где был курсор.\r\n\r\nА теперь давайте посмотрим на то, что произойдёт, если программа не выводит в конце выводимой ей строки символ перевода строки:\r\n\r\n[vidar|     ]\n[           ]\n[           ]\n\r\nСнова выводится индикатор, но в этот раз пробелы, выведенные на шаге 2, приводят к тому, что символы переходят на следующую строку:\r\n\r\n[vidar%     ]\n[     |     ]\n[           ]\n\r\nКоманда возврата каретки переводит курсор обратно к началу следующей строки:\r\n\r\n[vidar%     ]\n[|          ]\n[           ]\n\r\nТеперь приглашение выводится в той же строке и, в результате, не перезаписывает символ индикатора:\r\n\r\n[vidar%     ]\n[~ $ |      ]\n[           ]\n\r\nВот, что у нас получилось. Задача, которая, на первый взгляд, кажется простой, оказалась куда сложнее, чем ожидалось, но разумное использование переноса строк позволило найти простое решение для неё.\r\n\r\nТеперь, когда мы знаем о «секретном ингредиенте», мы, конечно, можем сделать то же самое и в bash:\r\n\r\nPROMPT_COMMAND=\'printf \"%%%$((COLUMNS-1))s\\\\r\"\'\n\r\nНадо отметить, что те же ограничения, о которых мы говорили в этой статье, применимы и к некоторым другим аспектам Unix:\r\n\r\n\r\nХотя это может принести пользу, и хотя в этом часто возникает необходимость — нет надёжного способа получения вывода ранее выполненной команды.\r\nНа удивление сложно делать скриншоты или дампы терминала, а соответствующие механизмы не универсальны и работают лишь в конкретных терминалах.\r\nШироко известно явление, когда вывод фоновых процессов «портит» внешний вид вывода процессов переднего плана, но эта проблема до сих пор не решена.\r\n\r\nСлучалось ли вам браться за решение сложных задач, которые, на первый взгляд, кажутся весьма простыми?\r\n\r\n', 'https://habr.com/ru/company/ruvds/blog/554292/', 'Сегодня я хочу рассказать о том, как командные оболочки zsh и fish обнаруживают пропущенные символы перевода строки и выделяют соответствующие места в выводе программ, делая это в условиях, когда моде'),
(9, 'Автоматизация поставок Siebel: На пути от хаоса к порядку', 'Введение\r\nРазработка под Siebel имеет свои отличительные черты. В её основе лежит конфигурирование объектов, и автоматизация бизнес процессов c их использованием, как из кубиков, использование справочников особых значений. Возможность написания скриптов присутствует, но не занимает доминирующее положение. Все изменения производятся через IDE Siebel Tools, либо в интерфейсе приложения. Особенностей много, но ничто человеческое Siebel не чуждо, и в том числе проблема переноса изменений с dev контура на другие среды. В этой статье мы хотели бы рассказать о том, как работает наш ci/cd конвейер. \r\nАвторы материала Horkin и Mryavka \r\nRosbankSiebelTeam\r\nПроблематика\r\nСтоит начать с того, что изначально процесс переноса изменений состоял только из инструментов Siebel. После того, как разработчик внес изменение в объект, он должен вручную его экспортировать и положить в папку со своей задачей. При этом нельзя экспортировать только ту часть, которая была изменена, необходимо выгружать объект целиком. А решение задачи, вроде формирования PIN-кода для карты, или списания комиссии за справку, состоит из изменений большого количества таких объектов. При этом IDE не отслеживало список изменений и его приходилось вести вручную. Кстати, такие объекты хранятся в репозитории Siebel, и потому называются repo объектами. К этому добавляется то, что некоторые объекты имеют свои характерные особенности, например, Workflow-процессы (WF) нужно активировать, и чтобы изменения применились и работали, нужно написать инструкцию для администратора, и указать, какой именно процесс нужно активировать. Также нужно выгрузить справочники, которые содержат определенные значения бизнес логики, например, типы банковских счетов и их коды. Если справочник был изменен, например, появился новый тип счета, необходимо его также добавить в поставку. (Такие справочники экспортируются с помощью инструмента Siebel Application Deployment Manager и называются ADM объектами).\r\nСкорее всего, если читатель не знаком с Siebel, то уже загружен новой инфой, но стоит сказать, что и это еще не все. Также есть элементы кастомизации интерфейса, скрипты БД и некоторые конфигурации, которые требует ручных действий. Все это также необходимо выгружать отдельно и указывать в инструкции.\r\nВ итоге, когда собирается релиз, который включает в себя большое количество задач от разных команд, то возникают проблемы: долгое формирование поставок, длительная установка, большое количество ошибок человеческого фактора. Администраторы загружены, а разработчики нервничают. В общем, такой подход вызывал заслуженное недовольство, и требовал преобразований. Так и началась работа над ci/cd конвейером.\r\nИнструменты\r\nДля корректной работы конвейера и коммуникации с участниками процесса были выбраны следующие инструменты:\r\n• JIRA – используется для ведения задач для поставки; Частично используется для коммуникации: разработчики уведомляются о проблемах в сборке, заказчики уведомляются о завершении установки (посредствам комментариев и изменении статусов задач). Так же Jira используется для ведения истории поставок – в задачах отмечается, в рамках каких поставок была произведена установка на наши стенды.\r\n• RocketSiebel (RS) – система контроля версий Siebel. В ней происходит версионирование стендов, разработчики размечают изменения в рамках задач, а конвейер – собирает поставку на требуемую среду.\r\n• Jenkins – оркестратор конвейера. Занимается упорядочиванием действий конвейера, сигнализирует о наличиях ошибок.\r\n• Ansible – “руки” нашего конвейера. При помощи скриптов, написанных на Python и PowerShell, выполняет сборку и установку поставки на стенды Siebel.\r\n• Bitbucket – на данный момент исполняет только роль хранилища исходного кода конвейера. В будущем планируется использоваться для передачи ADM, неверсионируемых в RocketSiebel, и файлов Web-серверов.\r\n• нативные инструменты Siebel :)\r\nОписание работы\r\nНа текущий момент в Росбанке используется Siebel CRM Innovation Pack 20.5. При разработке функционала (в рамках требований задач Jira) разработчики вносят изменения на dev-стенде. Все эти изменения подтягивает в себя RocketSiebel и позволяет использовать эти изменения для сборки поставки и их передачи по средам. По завершении задачи разработчик размечает свои изменения в Task и называет ключом задачи Jira (чтобы в дальнейшем он мог быть использован при работе конвейера).\r\n\r\nРисунок 1. Тикет в JIRA\r\nПо расписанию (в 12:00 и 17:00 для ТЕСТ и в 14:00 для СЕРТ) конвейер начинает работу. Первым шагом он скачивает актуальные версии скриптов установки из Bitbucket. Затем конвейер выгружает по фильтрам Jira задачи для поставки (для ТЕСТ и СЕРТ отдельный фильтр), формирует патч для требуемого стенда в RockerSiebel. Если по какой-то причине по задаче нет Task\'а – конвейер её просто пропускает. \r\n\r\nРисунок 2. Таск в RocketSiebel\r\nПосле сборки конвейер производит проверку патча на наличие конфликтов. Если таковые имеются – идёт оповещение разработчиков через комментарий в Jira и сообщение в Telegram. Для решения конфликтов разработчикам даётся время на их исправление (по умолчанию – 1 час), если конфликты решены не будут – задача исключается из поставки.\r\nПри отсутствии конфликтов конвейер продолжает свою работу.\r\n\r\nРисунок 3. Оповещение о конфликте\r\nПо завершении работы с конфликтами конвейер делает Merge патча и формирует итоговую поставку для стенда Siebel CRM. После чего начинается процесс установки патча.\r\nСледующим шагом конвейер скачивает и распаковывает архив с поставкой на Windows-сервере, откуда будет производиться установка на стенд. Обязательное условие – наличие на этом сервере подключения к БД Siebel CRM и Siebel Tools. \r\n\r\nРисунок 4. Пайплайн в Jenkins\r\nУстановка на требуемый стенд начинается с создания Workspace, в который будут импортироваться объекты. Имя воркспейса соответствует названию поставки в RocketSiebel (для удобства разбора проблем с поставкой).\r\nПо нашему опыту работы с IP 20.5 есть определённые проблемы с импортом Workflow процессов, в связи с этим после создания Workspace конвейер переименует WF на стенде по списку объектов поставки, во избежание проблем после установки. SQL скрипт для переименования формируется при помощи java-метода, который вызывается Ansible’ом в БД Siebel.\r\nЗатем конвейер блокирует все проекты и происходит импорт объектов из поставки. Далее формируется и применяется скрипт изменения объектов БД (Apply DDL). После происходит инкрементальная компиляция таблиц в Runtime-репозиторий. Список таблиц для компиляции формируется на основании объектов в поставке.\r\nСледующим шагом происходит Checkpoint и Deliver Workspace в Main (применяются изменения к Runtime-репозиторию). При помощи Soap-сервиса отправляется запрос в Siebel с названиями Workflow процессов для их активации. \r\nПоследним шагом в установке является заливка справочников ADM. Импорт производится при помощи вызова утилиты RocketSiebel.\r\nПо завершении установки конвейер делает оповещения в задачах JIRA из поставки о завершении установки:\r\n\r\nУказывается имя поставки, в рамках которой производилась установка;\r\nПубликуется комментарий о том, что поставка завершена;\r\nМеняется статус, сигнализирующий о том, что можно начинать тестирование.\r\nДополнительно идёт оповещение разработчиков в Telegram-канале о завершении установки (и наличии возможных ошибок). Дополнительно, информация об установке и лог заливки объектов дублируются в почте.\r\n\r\n\r\nРисунок 5. Оповещение об успешной установке\r\nБлижайшие планы\r\nХотя все справочники версионируются в RocketSiebel, есть печатные формы (ПФ), которые тоже относятся к АДМ объектам, но стоят особняком. На данный момент RS их не версионирует, а в задачах они встречаются часто. Чтобы встроить деплой ПФ в пайплайн, на стороне Siebel сделали отдельный веб-сервис, а сами формы планируем передавать через BitBucket.\r\nКроме этого, на данной момент конвейер не содержит шаг с рестартом сервера, а не смотря на введения нового Innovation Pack, рестарт часто требуется, так как некоторые серверные компоненты, например, EAIObjMgr не подтягивают изменения из рантайм репозитория без рестарта.\r\nЗаключение\r\nНа данный момент разработчики тратят гораздо меньше времени на формирование поставок по своим задачам. Администраторы тратят меньше времени на установку изменений на целевые среды, а некоторых кейсах даже не привлекаются к установке. Существенно сократилось время поставок на непроизводственные контуры и теперь мы выносим изменения в среду тестирования 2 раза в день, а препродакшена 1 раз. Косвенно это повлияло и на количество багов на продакшене, которых заметно сократилось.\r\nНесмотря на то, что получилось достичь определенных результатов, мы планируем и дальше развивать процесс автоматизации установки изменений, сокращать время поставок, добавлять новые фишки и удобства.', 'https://habr.com/ru/company/rosbank/blog/556122/', 'Введение\r\nРазработка под Siebel имеет свои отличительные черты. В её основе лежит конфигурирование объектов, и автоматизация бизнес процессов c их использованием, как из кубиков, использование справоч'),
(10, '30 лет Линукса. Интервью с Линусом Торвальдсом. Часть 2', '\r\n\r\nПервая часть интервью.\r\n\r\nРаспределенная система контроля версий Git\r\nДж.А.: Linux – только первая из ваших работ, глобально повлиявших на мир опенсорса. В 2005 году вы также создали Git, исключительно популярную распределенную систему контроля версий. Вы быстро перенесли дерево исходников ядра Linux из проприетарного хранилища Bitkeeper в новоиспеченный Git, который сделали опенсорсным, и в том же году передали поддержку Git Джунио Хамано. История этих событий увлекательна, расскажите, что побудило вас передать этот проект так быстро, и как вы нашли и выбрали Джунио? \r\n\r\nЛТ: Итак, ответ на этот вопрос состоит из двух частей.\r\n\r\n\r\nВо-первых, я совершенно не хотел создавать новую систему контроля исходников.  Linux был создан, так как мне очень интересен низкоуровневый интерфейс между аппаратным и программным обеспечением — в принципе, эта работа была выполнена из любви к предмету и личного интереса. Напротив, Git был создан из необходимости: не потому, что я интересуюсь контролем исходников, а потому что большинство имевшихся на тот момент систем контроля версий вызывали у меня подлинное отвращение, а та единственная, что показалась мне наиболее терпимой и при этом действительно весьма хорошо сочеталась с моделью разработки Linux (BitKeeper) стала несостоятельной.\r\n\r\nИтог: я занимаюсь Linux более 30 лет (до годовщины первого релиза еще остается пара месяцев, но работать над тем, что впоследствии превратилось в Linux, я стал уже более 30 лет назад), и все это время занимаюсь его поддержкой. Но Git? Я даже не думал о том, чтобы поддерживать его в долгосрочной перспективе. Он мне определенно нравится, и я, конечно, считаю, что это наилучшая из имеющихся систем управления исходниками, но она не является моей большой любовью и увлечением, если вы понимаете, о чем я. \r\n\r\nПоэтому я всегда хотел найти кого-то, кто поддерживал бы эту систему контроля исходников за меня; на самом деле, я был бы счастлив вообще не писать ее. \r\n\r\nТаков контекст.\r\n\r\nЧто касается Джунио — на самом деле, он один из первых, кто реально занялся разработкой Git. Первые изменения от него пришли мне в пределах нескольких дней после того, как я выложил в общий доступ самую первую (и весьма сырую) версию Git. Поэтому Джунио причастен к этому проекту, можно сказать, с самых первых дней Git.\r\n\r\nНо не подумайте, что я просто передал проект первому встречному. Я поддерживал Git несколько месяцев, и что побудило меня поинтересоваться у Джунио, не хочет ли он взять эту поддержку на себя — так это трудноуловимое чувство «хорошего вкуса». В самом деле, не могу описать это точнее: программирование сводится к решению технических задач, но суть в том, как вы их решаете, и это одна из тех вещей, которые начинают распознаваться со временем: определенные люди обладают «хорошим вкусом», и поэтому выбирают «правильное» решение.   \r\n\r\nНе хочу заявлять, что программирование — это искусство, поскольку на самом деле программирование — это в основном хорошая инженерия. Я глубоко верю в мантру Томаса Эдисона про «один процент таланта и девяносто девять процентов усердия»; практически вся суть успеха заключается в мелких деталях и ежедневной рутинной работе. Но, все-таки, иногда приходится проявить «вдохновение» и тот самый «хороший вкус», то есть, не просто решить задачу, а решить ее чисто, аккуратно и да, даже красиво. \r\n\r\nВот у Джунио такой «хороший вкус» нашелся.\r\n\r\nВсякий раз, когда заходит речь о Git, я не забываю предельно ясно подчеркнуть следующее: пусть я и был зачинателем Git и спроектировал его ключевые идеи, зачастую я получаю за это чрезмерно много признания. Это было больше 15 лет назад, и я был по-настоящему погружен в работу над Git только в течение первого года. Джунио образцово справляется с поддержкой Git, и именно благодаря нему Git стал тем, чем является сегодня.  \r\n\r\nКстати, вся эта история с «хорошим вкусом» и подыскиванием людей, которые им обладают, а также с умением доверять этим людям – касается не только Git, но и в не меньшей степени всей истории Linux. В отличие от Git, Linux – это продукт, чьей поддержкой я до сих пор активно занимаюсь, но, чем Linux во многом похож на Git – так это вовлеченностью огромного множества людей в проект. Думаю, одно из самых замечательных достижений Linux в том, что его поддержкой занимаются буквально сотни активных участников, и все они, отвечающие за разные части ядра, обладают этим трудноопределимым «чувством вкуса».   \r\n\r\nДж.А.: Доводилось ли вам когда-либо делегировать кому-то поддержку, а потом понять, что это решение было ошибочным? \r\n\r\nЛТ: структура нашей работы по поддержке никогда не была настолько «черно-белой» или негибкой, чтобы это доставляло нам какие-либо проблемы. На самом деле, маловероятно, что мы даже когда-нибудь попытаемся тщательно документировать процедуру поддержки. Да, у нас есть файл MAINTAINERS, но он создан для того, чтобы можно было найти нужных людей, это в самом деле не знак какого-то исключительного обладания.\r\n\r\nПоэтому вся структура «кто чем владеет» – в основном пластична и предназначена для ориентирования, означает «этот человек активен и хорошо справляется со своей работой», а не «упс, мы доверили человеку проект, а он взял и все запорол».\r\n\r\nСитуация пластична и в том смысле, что, может быть, вы занимаетесь поддержкой одной подсистемы, но вам что-то нужно подхватить из другой системы – так вот, эти границы проницаемы. Обычно такие вещи сначала активно обсуждаются с людьми, а лишь потом делаются, но суть в том, что такая практика есть, и не существует жестких правил вроде «вам можно прикасаться только к этому файлу». \r\n\r\nФактически, здесь мы вновь затрагиваем тему лицензирования, поднятую в первой части, и подчеркиваем один из принципов, по которым спроектирован Git, а именно «у каждого есть собственное дерево, и технически ни одно дерево не является особенным». \r\n\r\nПоскольку во многих других проектах использовались такие инструменты как CVS или SVN – фундаментально некоторые люди действительно становятся особенными и пользуются «обладанием», которое приходит вместе с этим статусом. В мире BSD этот феномен называется «бит подтверждения» (commit bit): это разряд, обладатель которого имеет право фиксировать код в центральном репозитории (или, как минимум, некоторых его частях).\r\n\r\nЯ всегда терпеть не мог такую модель, поскольку она неизбежно сказывается на политике и порождает в сообществе разработчиков «клику», когда некоторые люди становятся привилегированными, и им по умолчанию доверяют. Проблема даже не в том, что «по умолчанию доверяют», а как раз в другой стороне медали: кому-то, другим людям, не доверяют, и они по определению оказываются аутсайдерами, которым для выполнения работы нужно пройти кого-то из «охранителей».\r\n\r\nОпять же, в Git такой ситуации не возникает. Все равны. Каждый может клонировать ветку, начать собственную разработку, и, если они хорошо справятся с работой, то при объединении их ветка может вернуться в основную, а если очень хорошо – то им поручается поддержка, и именно они начинают отвечать за слияние кода в тех деревьях, за которые отвечают ;).\r\n\r\nПоэтому не приходится наделять людей особыми привилегиями, таким «битом подтверждения». Это также означает, что не возникает политики, связанной с коммитами, не приходится никому «по умолчанию доверять». Если оказалось, что кто-то плохо справился с работой, либо, что чаще, человек просто охладел к проекту и нашел дело поинтереснее – их наработки не попадут в основную ветку при объединении, и они не будут путаться под ногами у других, кто может предложить новые, свежие идеи.\r\n\r\nДж.А.: Впечатляли ли вас когда-нибудь новые возможности Git, включали ли вы их в свои рабочие процессы? Можете ли назвать такие фичи, которых, на ваш взгляд, в Git до сих пор не хватает? \r\n\r\nЛТ: разумеется, в первую очередь были удовлетворены именно мои пожелания по функционалу, поэтому мне редко приходилось задумываться о каких-либо новых фичах.\r\n\r\nС годами Git определенно улучшился, и некоторые такие подвижки отразились и на моих рабочих процессах. Например, Git всегда работал весьма быстро — в конце концов, это была одна из целей, которые я поставил при проектировании, но значительная часть работы исходно делалась в виде шелл-скриптов, организованных вокруг некоторых базовых вспомогательных программ. С годами большая часть этих шелл-скриптов ушла, это означает, что я могу применять комплекты патчей от Эндрю Мортона даже быстрее, чем это делалось изначально. Это очень радует, поскольку именно скорость работы с патчами я использовал в качестве одного из первых контрольных показателей при тестировании производительности.\r\n\r\nИтак, для меня Git всегда был хорош, но со временем стал только лучше.\r\n\r\nЗначительные улучшения связаны с тем, насколько удобнее стало «регулярным пользователям» работать с Git. Во многом благодаря тому, что люди разобрались, как в Git устроен поток задач, и просто привыкли к нему (он очень отличается от CVS и других аналогов, к которым люди привыкли ранее), но и сам Git стал гораздо приятнее в использовании.\r\n\r\n\r\nОблачные серверы от Маклауд быстрые и безопасные.\r\n\r\nЗарегистрируйтесь по ссылке выше или кликнув на баннер и получите 10% скидку на первый месяц аренды сервера любой конфигурации!\r\n\r\n', 'https://habr.com/ru/company/macloud/blog/556092/', '\r\n\r\nПервая часть интервью.\r\n\r\nРаспределенная система контроля версий Git\r\nДж.А.: Linux – только первая из ваших работ, глобально повлиявших на мир опенсорса. В 2005 году вы также создали Git, исключит');
INSERT INTO `news` (`id`, `title`, `value`, `link`, `short`) VALUES
(11, 'Как победить букмекеров с помощью ИИ: опыт студентов магистратуры «Наука о данных»', 'Привет, Хабр! Сегодня хотим представить вам проект студентов магистратуры «Наука о данных» НИТУ МИСиС и Zavtra.Online (подразделении SkillFactory по работе с университетами) созданный на учебном \"Межгалактическом Хакатоне 2021\", который прошел в марте. Команда поделится решением выбранной задачи — предсказание победителя-бойца турнира UFC. Задача отличалась от прочих тем, что после написания модели из неё можно сделать целый продукт, оформив модель в приложение, готовое к использованию конечными пользователями, например теми, кто захочет обыграть букмекеров. Гипотеза и её проверкаДля нашего проекта мы сформулировали гипотезу, что на победу бойца влияют:физические параметры бойца (его рост, вес, размах рук и ног);возраст бойца (всё-таки со временем физически мы слабеем);разница в опыте соперников (вряд ли какой-то новичок без опыта одолеет Хабиба);характер поведения бойца на ринге (чаще обороняется или чаще нападает);географические параметры (вдруг наш боец не успел адаптироваться к другому часовому поясу).Основа всех методов проверки модели машинного обучения — разделение данных при обучении модели на тренировочную и валидационную выборки. Валидационная выборка потребуется, чтобы понять, что произойдёт, если наша модель столкнётся с данными, которых она раньше не видела.Принцип разделения прост: мы случайным образом разбиваем свои данные примерно на 70 %, используемых для обучения модели, и 30 % — для тестирования модели. Однако есть нюанс...  Для предсказания результата боя UFC важно, чтобы тренировочная выборка была раньше тестовой во временном периоде.Иначе модель будет смотреть в будущее, и на реальных данных модель будет работать некорректно. Этот нюанс мы учли и разбили выборку не случайным образом, а в зависимости от временных периодов.Разработка проектаВ ходе работы над проектом мы просидели в зуме, а затем в дискорде более 10 часов. Углубились во все тонкости предобработки данных, сделали немного занимательной визуализации и обучили нашу модель.Примерно 90 % времени мы потратили на обработку данных и остальные 10 % — на обучение модели. Пайплайн подготовки данных верхнеуровнево выглядел следующим образом: мы очистили датасет от пропусков и выбросов и обогатили его новыми признаками.Например, на основе физических характеристик рассчитали другие, а также посчитали кумулятивную статистику для каждого боя и каждого бойца. А ещё для увеличения качества модели вычислили разницу между физическими характеристиками бойцов.Сбор данных и статистикаМентор предоставил нам спарсенные данные по истории Боёв UFC и статистику  по бойцам. Данные и Jupyter Notebook с бейзлайном модели можно найти по этой ссылке на Kaggle. В связи с тем что сроки у нас были ограничены, мы решили не заниматься дополнительным парсингом фичей, а уделить большое внимание обработке имеющихся данных и генерации новых признаков. Также в процессе обработки мы собрали немного занимательной статистики по боям: например, на этом бублике можно увидеть распределение боев по категориям, из которой можно увидеть, что мужских боёв гораздо больше, чем женских (увы).А на этом бублике видим, что бои заканчиваются с равной вероятностью либо нокаутом, либо признанием своего поражения, либо решением судьи.Предобработка данныхОсновная идея обработки данных заключалась в создании единого датасета, содержащего накопительную статистику по каждому из бойцов за все его предыдущие бои и его физические характеристики на момент начала боя. Необходимо было избежать лика в данных, при котором модель могла переобучиться на данных из ещё не состоявшегося боя. После очистки датасета от пропусков и выбросов в первую очередь мы сгенерировали фичи по каждому из бойцов, связанные с его физическими характеристиками. Поскольку мы имеем информацию по физическим характеристикам бойца на настоящий момент, для  корректного обучения модели на данных по боям из прошлого мы использовали фичи, которые не заглядывают в будущее. Вторым шагом был сбор фичей с кумулятивной статистикой по всем предыдущим боям для каждого из соперников и генерации из получившейся накопленной суммы новых важных признаков, таких как серия побед, сумма побед нокаутами, сумма чистых побед, точность ударов, среднее время боя, KO/TKO и т. д. Это перечень важных показателей по уже проведённым боям, которые обычно публикуются на сайте UFC до начала боя. Затем мы посчитали разницу по физическим характеристикам бойцов, удалили коррелированные между собой величины и “законсервировали” данные в pkl-файл.Случайный лес, стекинг, бэггинг и итоговая модельВ качестве первой модели мы решили взять “случайный лес”, так как эта модель неплохо справляется с ненормализованными данными. Результат ошеломил по сравнению с букмекерскими конторами, процент точности был  очень высок, однако не всё так просто… Изначально мы не учли наличие временного ряда, и наша модель тренировалась на данных из будущего перемешанного с прошлым, то есть мы взяли временной ряд и случайным образом поделили данные на тренировочные и тестовые (80/20). Тренировочные — для тренировки модели, тестовые — для проверки правильности уже тренированной модели.Процент точности прогноза победы варьировался от 75 до 82%! Но какая разница, если обучение было неправильным?.. Модель не должна смотреть в будущее, как это было у нас. Решить эту проблему удалось достаточно просто: мы вернули даты для нашего датасета и поделили на тренировочные и тестовые по датам: данные до 2018 года взяли за тренировочные, данные после 2018 года — за тестовые, и — вуаля, точность упала в среднем на 5 %, однако теперь мы в ней хотя бы уверены.Потюнить модели в достаточной мере не получилось, так как было мало времени. Но получилось попробовать стекинг, бэггинг и другие разновидности моделей с параметрами по умолчанию. Они, к сожалению, не дали результатов лучше, чем стандартный случайный лес, поэтому в качестве итоговой модели мы оставили именно этот алгоритм. Возможно, в будущем после подбора параметров для всех моделей найдётся та, которая окажется лучше.Посмотреть на модель можно на GitHub.Для того чтобы модель предсказала победителя на новых данных, нужно эти данные обработать таким же образом, как мы это делали в нашем ноутбуке (Jupyter Notebook) DeepOverfitting-DataPreparing, после этого просто подать эти строчки данных для двух бойцов в predict функцию нашей модели и получить предсказание, либо 0, либо 1, 0 — победил 2 боец, 1 — победил первый боец.ИтогиСамое главное — мы все выявили свои слабые и сильные стороны, поняли, какие пробелы в понимании работы с временными рядами нам нужно заполнить, и научились распределять нагрузку в команде. После всего проделанного нами пути мы решили, что не остановимся на достигнутом и продолжим развивать наш продукт.Поэтому мы наметили следующий план:Улучшим точность предсказаний путем более кропотливой настройки модели.Проверим нашу текущую модель на предстоящих боях.Попробуем применить нейронные сети и глубокое обучение.Разработаем приложение, которое будет в удобном виде показывать, сколько и куда ставить.Станем кем-то кроме букмекера, кто заработает на ставках. И, конечно, будем писать на Хабре про дальнейшее развитие проекта. Букмекеры, берегитесь, мы идём за вами.Состав команды работавшей над проектов:Евгения Шикина (г. Видное)Оксана Евсеева (г. Барселона)Максим Щиколодков (г. Москва)Михаил Стриженов (г. Москва)Лев Неганов (г. Москва)Кирилл Плотников (г. Екатеринбург)Узнать больше про магистратуру можно на сайте data.misis.ru и в Telegram канале.Ну и конечно не магистратурой единой! Если вы хотите узнать больше про data science, машинное и глубокое обучение — заглядывайте к нам на соответствующий курсы, будет непросто, но увлекательно. Узнайте, как прокачаться и в других специальностях и навыках или освоить их с нуля:  Профессия Data Analyst  Курс по Data Engineering  Курс \"Математика для Data Science\"  Курс \"Математика и Machine Learning для Data Science\"  Курс \"Алгоритмы и структуры данных\"Другие профессии и курсыПРОФЕССИИ  Профессия Fullstack-разработчик на Python  Профессия Java-разработчик  Профессия QA-инженер на JAVA  Профессия Frontend-разработчик  Профессия Этичный хакер  Профессия C++ разработчик  Профессия Разработчик игр на Unity  Профессия Веб-разработчик  Профессия iOS-разработчик с нуля  Профессия Android-разработчик с нуляКУРСЫ  Курс по Machine Learning  Курс \"Machine Learning и Deep Learning\"  Курс \"Математика для Data Science\"  Курс \"Python для веб-разработки\"  Курс по аналитике данных  Курс по DevOps', 'https://habr.com/ru/company/skillfactory/blog/555772/', 'Привет, Хабр! Сегодня хотим представить вам проект студентов магистратуры «Наука о данных» НИТУ МИСиС и Zavtra.Online (подразделении SkillFactory по работе с университетами) созданный на учебном \"Межг'),
(12, 'Всё о проекте «Спутниковый интернет Starlink». Часть 29. Страны, где сервис начнет предоставляться в первую очередь', 'Предлагаю ознакомиться с ранее размещенными материалами по проекту Starlink (SL):\r\n ‣ Часть 20. Внутреннее устройство терминала SL  ‣ Часть 21. SL и проблемы поляризаци  ‣ Часть 22. Проблемы электромагнитной совместимости c другими спутниками.  ‣ Часть 23. Промежуточные итоги аукциона RDOF  ‣ Часть 24. Лазерные Каналы -2 ‣ Часть 25. EPFD  ‣ Часть 26. Первые итоги. Часть первая — позитивная ‣ Часть 27. Первые итоги. Часть вторая— проблемная ‣ Часть 28. Использование Старлинк на движущихся объектах\r\nОдин из фанатов Starlink, исследуя его IP адресацию и IP пространство, выяснил следующее:\r\nI have written a script that runs through all IPs advertised by the Google ASN used by Starlink, and have come up with some interesting observations:\r\n\r\n\r\nAny /23 or /24 IP block is chopped up into /27 blocks, then assigned to a country.\r\n15 countries have IP blocks assigned to them: GB, GR, ES, PL, IE, AT, US, AU, NZ, CL, DE, NL, BE, FR, IT (Edit: one result is blank/no country found!)\r\nThe country with most blocks is the US, with 306. Second, surprisingly, is Chile, with 18, then Australia with 16, and Belgium with 12. UK gets 9, and at the bottom are Greece and New Zeland with 2 blocks each. This can give you an idea of relative market size, as you can only stretch CGNAT so far!\r\nThe «IATA-code» identifiers don\'t align to countries, except for the US. For example, the UK is served by /27 blocks «assigned» to FRA1, FRA2, LHR1, LHR2, LHR3, LHR4, MAD1, and MAD2.\r\nIf we were to equate identifiers to POPs, which I\'m no longer so sure about, the US is served by 34, and most other countries between 6 and 8, with some having 2.\r\n\r\n\r\nЭто позволяет сделать вывод, что сервис Starlink будет доступен в ближайшее время в следующих 16 странах: Великобритания, Греция, Испания, Польша, Ирландия, Польша, Австрия, США, Австралия, Новая Зеландия, Чили, Дания, Нидерланды, Бельгия, Франция, Италия и не упомянутая выше Канада, которая вероятно объединена тут в части блоков адресов с США.\r\nВозможно с учетом информации ниже в список попадет и Португалия, но как часть Испанского рынка\r\n\r\nКроме того, поиски среди вакансий на сайте SpaceX показали, что им нужны инженеры в техподдержку со знанием следующих языков:\r\n\r\nFrench, Greek, Italian,Polish,Portuguese (seems to be the most recent addition),Spanish,German (service already started there)\r\n\r\nДля знатоков греческого работа предлагается в третью смену — по сути ночью, когда в Греции день.\r\n\r\nНасчет португальского — тут 2 варианта: Португалия и Бразилия. Последняя желаннее и интереснее — как-никак 200 миллионов и плохая инфраструктура в сельской местности и Амазонии, но Бразилия имеет очень жесткие правила по допуску на внутренний рынок для иностранных компаний, и сейчас там есть успешный спутниковый оператор Hughes Бразилия.\r\n\r\nМожно оценить соотношение в количестве абонентов, которое ожидает SpaceX, например, в Греции и Новой Зеландии их будет примерно в 150 раз меньше чем в США и Канаде.\r\n\r\nОпределенно в список попали страны ЕС с высоким уровнем дохода населения и/или большим населением (Польша!), плохой или сложной инфраструктурой (Греция с ее островами), малонаселенные страны со сложной географией (Австралия и Новая Зеландия, частично Чили (одна из самых развитых стран Латинской Америки, но так же сложная по географии)). И во всех этих странах местный регулятор выдал SpaceX все разрешения для работы, плюс имеется местная 100% дочка SpaceX.\r\n\r\nИ еще интересное…\r\n\r\nStarlink возможно сможет быть принимаем и в России на узкой полоске границы Калининградской области и Польши, которая идет вдоль 54 параллели. Учитывая наклон 53 градуса для группировки, то направить луч севернее на 1 градус физически вполне возможно. \r\nНо остается вопрос: что предпочтет сам SpaceX: допустить, что ослабленный сигнал периодически «заползает» на территорию России на 10-20 км от границы (что есть нарушение правил МСЭ) или просто отказаться от обслуживания деревень Польши вдоль ее границы с РФ? \r\nДедектировать сигнал от спутника Starlink будет крайне сложно — луч узкий, непрерывно скачет по зонам обслуживания диаметром 24-70 км, а положение ИСЗ в небе для наведения антенны нужно знать очень точно.\r\n\r\nРеальных помех для российских РЭС в Калининградской области не будет, тем более что российских VSAT-терминалов в Калининградской области практически нет.\r\n\r\nИ уж точно Starlink может работать южнее на границе Польши с Белоруссией и Украиной. Более того, учитывая политические реалии Украины: тягу к Западу, статус США как ее ближайшего союзника, и тесные экономические отношения с Польшей, я не исключаю, что Украина может разрешить SpaceX работать на своей территории через гейтвей на территории Польши.\r\n\r\nПонятно, что при нынешних ценах на терминал и месячной абонплате в 99 Долларов + налоги, число абонентов в сельских районах Украины будет исчисляться сотнями и тысячами, что совсем не оправдает инвестиции в гейтвей, узел доступа, техподдержку и тп и тд. \r\n\r\nНо теоретически можно дать сервис и без образования оператора на территории Украины (например, с приемом денег на StarLink Germany GmbH), хотя в данный момент такая схема категорически противоречит законодательству Украины в области связи и выделения частот. \r\n\r\nПовторюсь — это мои досужие домыслы, но при известном политическом желании «наверху» «понравиться» и быть «в дружной семье цивилизованных стран» технически возможные…', 'https://habr.com/ru/post/556084/', 'Предлагаю ознакомиться с ранее размещенными материалами по проекту Starlink (SL):\r\n ‣ Часть 20. Внутреннее устройство терминала SL  ‣ Часть 21. SL и проблемы поляризаци  ‣ Часть 22. Проблемы электрома'),
(13, 'Как работают и где применяются бессерверные вычисления (Function-as-a-Service)', 'Serverless-вычисления и работающие на их основе решения Function-as-a-Service помогают разработчикам развивать продукты, ориентируясь на бизнес-фичи. Мы поэкспериментировали с этими технологиями и пришли к выводу, что для боевого применения существующие решения сыроваты. Пойдём по порядку.Термин «бессерверные вычисления» отчасти вводит в заблуждение – конечно, в основе продукта сервера остаются, но разработчикам не приходится о них заботиться. По сути своей Serverless продолжает те же идеи виртуализации, что и более ранние aaS-технологии: позволить команде сосредоточиться на коде и развитии функций. Если IaaS – это абстракция оборудования, контейнеры – абстракция приложений, то FaaS – это абстракция бизнес-логики сервиса.Идея в том, чтобы не паковать в контейнер сервер приложения, базу данных, средства балансировки нагрузки. Разработчики могут изолировать функцию в коде, загрузить её на облачной платформе и запускать её в тот момент, когда она нужна. Выделение инстансов, развёртывание кода и распределение ресурсов, запуск веб-интерфейсов, мониторинг работоспособности, обеспечение безопасности – всё это происходит автоматически.FaaS обеспечивает максимальную гибкость в управлении производительностью – во время простоя функция вообще не потребляет ресурсы, а если потребуется, платформа быстро выделяет мощности, которых будет достаточно практически с любой нагрузкой. Обслуживает приложение одного пользователя или сразу сто тысяч – производительность системы с FaaS-архитектурой фактически не страдает, а у продукта с традиционной архитектурой обязательно начались бы проблемы.Команда не беспокоится о бэкенде и процессах деплоя, В идеальных условиях реализация новой фичи сводится к загрузке одной функции на сервер. В результате разработка двигается быстрее, Time-to-Market ползёт вниз. А в компании в целом внедрение FaaS помогает развить платформенный подход – для Serverless-вычислений нужен либо пул облачных ресурсов от провайдера, либо Kubernetes-кластер.Как это работает на практикеНа рынке есть уже целый набор Serverless-платформ. Мы внимательно изучили два решения: Lambda от Amazon и KNative. Первое представляет собой проприетарный сервис для работы с облаком Amazon, второе работает поверх Kubernetes.Amazon Lambda – вполне рабочий вариант со всеми возможностями, о которых мы говорили выше. Платформа выполняет все рутинные операции с продуктом, разворачивает приложения, мониторит работоспособность и производительность групп инстансов, обеспечивает отказоустойчивость и масштабирование.Главное «но» – это проприетарный продукт, а значит вы ограничены амазоновским облаком и вынуждены использовать другие продукты их экосистемы. Если захотите сменить платформу, скорее всего, вам придётся сильно перестраивать продукт, поскольку в новой инфраструктуре правила могут сильно отличаться.KNative – для нас решение более интересное, поскольку оно работает поверх Kubernetes. В отличие от Lambda, в этом случае используется собственная платформа, приходится глубже погрузиться в архитектуру процесса. Выглядит она так:Event source – сущность FaaS-платформы, которая взаимодействует с внешними источниками событий. Триггером может быть HTTP-запрос, сообщение от брокера сообщений, событие самой платформыBroker – «корзина», которая принимает и хранит информацию о событиях от Event Source. Брокер может представлять собой модуль Kafka, работать в оперативной памяти и т.п.Trigger – подписанный на Broker компонент, который достаёт сообщения из «корзины» и передаёт их на исполнение в Service.Service – рабочая функция, изолированная бизнес-логика.С точки зрения разработчика процесс выглядит практически так же, как с уже привычными контейнеризированными приложениями, меняется только объект: (1) написать функцию, (2) упаковать её в Docker-образ, (3) загрузить.Главный недостаток KNative – нет средств логирования и мониторинга, а для FaaS-решений это критически важно. Если ваш продукт разбит на функции, без эффективного мониторинга и логирования быстро установить источник сбоя невозможно, поскольку придётся смотреть на каждую функцию отдельно.Преимущества FaaSЛучше всего подход показывает себя, когда не требуется мгновенный ответ пользователю и когда нагрузка может колебаться от 0 до 100%:Задачи, которые выполняются по расписанию. Операции экспорта/импорта в системах финансовой отчётности, учётных системах, решениях для создания резервных копий.Асинхронная отправка уведомлений пользователю (push, email, СМС).Машинное обучение, Интернет вещей, системы ИИ – все эти отрасли точно оценят такие возможности. Serverless позволяет выполнять вычисления ближе к эндпойнту, т.е. к пользователю. А значит, у продукта уменьшается задержка, сокращается нагрузка на передачу данных. Какие можно выделить недостатки Serverless:Такая архитектура плохо подходит для долгосрочных процессов. Если функция используется в приложении практически постоянно, то и потребление ресурсов будет таким же, как у традиционных продуктов.Лучшие платформы на данный момент привязывают компанию к тому или иному облачному провайдеру – будь то AWS, Microsoft Azure или Google Cloud. Решениям для Kubernetes ещё предстоит подрасти до этого уровня.FaaS – это не «волшебная таблетка», с которой разработчики могут забыть об инфраструктуре и просто отправлять на прод фичи. Всё равно нужно продумывать архитектуру, проектировать функции и их взаимодействие с помощью DDD. Иначе продукт превращается в массу сильно связанных между собой функций, в которых будет сложно разобраться. Разработчики не смогут деплоить такие функции и менять по отдельности. В худшем случае при обработке пользовательских запросов пользователя придётся поднимать все функции. Наш вывод – до эпохи Serverless ещё несколько лет…При условии, что разработчики будут развивать это направление, в частности – развивать open source платформы до уровня того же Amazon Lambda.Мотивацией таких проектов может быть сокращение затрат на ресурсы, улучшение управления большими энергозатратными продуктами. Но на данный момент разработчикам может быть проще работать «по старинке». Владение Serverless и умение использовать эти инструменты – это хороший багаж, до боевого применения компаниям стоит подождать пару лет. ', 'https://habr.com/ru/post/556112/', 'Serverless-вычисления и работающие на их основе решения Function-as-a-Service помогают разработчикам развивать продукты, ориентируясь на бизнес-фичи. Мы поэкспериментировали с этими технологиями и при');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `news`
--
ALTER TABLE `news`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `link` (`link`),
  ADD KEY `id` (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `news`
--
ALTER TABLE `news`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
